<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rafed M. Yasir</title><link>https://rafed.github.io/</link><atom:link href="https://rafed.github.io/index.xml" rel="self" type="application/rss+xml"/><description>Rafed M. Yasir</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>Â© 2022 Rafed Muhammad Yasir</copyright><lastBuildDate>Sat, 01 Jun 2030 13:00:00 +0000</lastBuildDate><image><url>https://rafed.github.io/media/icon_hu21e3d06fd85657997c5a756b8676c06c_23682_512x512_fill_lanczos_center_3.png</url><title>Rafed M. Yasir</title><link>https://rafed.github.io/</link></image><item><title>Introduction to Distributed systems</title><link>https://rafed.github.io/courses/distributed-systems/theory/01-introduction/</link><pubDate>Fri, 17 Jun 2022 00:00:00 +0000</pubDate><guid>https://rafed.github.io/courses/distributed-systems/theory/01-introduction/</guid><description>&lt;p>A distributed system is a computing environment in which &lt;strong>various components&lt;/strong> are spread across &lt;strong>multiple computers&lt;/strong> (or other computing devices) on &lt;strong>a network&lt;/strong>.&lt;/p>
&lt;p>If one machine can do a task in 1 hr, surely two equivalent machines can do it in 30 mins.&lt;/p>
&lt;p>We gain some sort of advantage that&lt;/p>
&lt;p>Examples of distributed systems&lt;/p>
&lt;ol>
&lt;li>Machine learning (for compute)&lt;/li>
&lt;li>P2P file sharing (high availability, share large files, piracy)&lt;/li>
&lt;li>Google search engine (for storage and bandwidth)&lt;/li>
&lt;li>Facebook (for storage and bandwidth)&lt;/li>
&lt;li>Multiplayer games (entertainment)&lt;/li>
&lt;li>Space rockets (correctness)
spaceX dragon&lt;/li>
&lt;li>Black hole image (distributed observation)&lt;/li>
&lt;li>IOT (Sensors on a network)&lt;/li>
&lt;li>Blockchain
decentralized record of transactions
guarantees the fidelity and security of a record
distributed database&lt;/li>
&lt;/ol></description></item><item><title>Containerizing an App</title><link>https://rafed.github.io/courses/distributed-systems/lab/containerization/</link><pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate><guid>https://rafed.github.io/courses/distributed-systems/lab/containerization/</guid><description>&lt;h2 id="goal">Goal&lt;/h2>
&lt;p>You will build a simple web application and containerize it with docker.&lt;/p>
&lt;p>Follow the instructions in this &lt;a href="https://github.com/rafed/hello-docker" target="_blank" rel="noopener">Github repo&lt;/a> to complete this task.&lt;/p></description></item><item><title>Introduction to Microservices</title><link>https://rafed.github.io/courses/distributed-systems/theory/010-intro-microservices/</link><pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate><guid>https://rafed.github.io/courses/distributed-systems/theory/010-intro-microservices/</guid><description>&lt;div class="responsive-wrap">
&lt;iframe src="https://docs.google.com/presentation/d/1Sm-buXQKPJdvfuZLOxKzMbIJ0C4mYZ2hyk_Ike6aClU/edit?usp=sharing" frameborder="0" width="960" height="569" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true">&lt;/iframe>
&lt;/div></description></item><item><title>Hands on DevOps</title><link>https://rafed.github.io/courses/distributed-systems/lab/devops/</link><pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate><guid>https://rafed.github.io/courses/distributed-systems/lab/devops/</guid><description>&lt;h2 id="goal">Goal&lt;/h2>
&lt;p>You will learn to build a CI/CD pipeline using git, Github actions and Heroku.&lt;/p>
&lt;h2 id="instructions">Instructions&lt;/h2>
&lt;p>Follow the instructions in this &lt;a href="https://github.com/rafed/ci-cd-pipeline" target="_blank" rel="noopener">Github repo&lt;/a> to complete this task.&lt;/p></description></item><item><title>Ride sharing backend: From monolith to microservices</title><link>https://rafed.github.io/courses/distributed-systems/lab/microservice-ride-share/</link><pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate><guid>https://rafed.github.io/courses/distributed-systems/lab/microservice-ride-share/</guid><description>&lt;h2 id="goal">Goal&lt;/h2>
&lt;p>Your task is to build a distributed web system following the microservice architecture. It should be implemented following the steps below.&lt;/p>
&lt;h2 id="step-1-build-a-simple-server-and-a-client">Step 1: Build a simple server (and a client)&lt;/h2>
&lt;p>You will build a rudimentary version of a &lt;strong>Ride sharing app&lt;/strong> (like Uber/Pathao). The app itself will not be complex as we are here to build a distributed system and not a full-fledged app.&lt;/p>
&lt;h3 id="architecture">Architecture&lt;/h3>
&lt;pre>&lt;code class="language-mermaid">graph TD
A[&amp;quot;Client (Bot)&amp;quot;]--&amp;gt;B
B[Server]--&amp;gt;C[(Database)]
&lt;/code>&lt;/pre>
&lt;h3 id="requirements">Requirements&lt;/h3>
&lt;h4 id="client-bot">Client bot&lt;/h4>
&lt;p>The client bot will &lt;strong>spam the server every second&lt;/strong> with the following two http requests:&lt;/p>
&lt;ul>
&lt;li>Rider&amp;rsquo;s request contains:
&lt;ul>
&lt;li>Name&lt;/li>
&lt;li>Rider&amp;rsquo;s Coordinates (x, y) [Random]&lt;/li>
&lt;li>Rider&amp;rsquo;s Destination (x, y) [Random]&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Driver&amp;rsquo;s request contains:
&lt;ul>
&lt;li>Name&lt;/li>
&lt;li>Car number&lt;/li>
&lt;li>Driver&amp;rsquo;s Coordinates [Random]&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="server-requirements">Server requirements&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>/rider&lt;/strong> endpoint accepts rider requests (http)&lt;/li>
&lt;li>&lt;strong>/driver&lt;/strong> endpoint accepts driver requests (http)&lt;/li>
&lt;li>The server will store the information &lt;strong>in memory&lt;/strong> for &lt;strong>at least 5 seconds&lt;/strong>. Design a function that will periodically run on the cached information and make pairs (rider, driver) based on their shortest linear distance.&lt;/li>
&lt;li>Open a &lt;strong>socket.io&lt;/strong> bidirectional communication medium and send messages through the &lt;strong>/communication&lt;/strong> namespace. Messages from the server will be sent to the client through this channel.&lt;/li>
&lt;li>Send the ride fare to the client (linear distance * 2 taka) (through socket.io)&lt;/li>
&lt;li>&lt;strong>/rating&lt;/strong> endpoint receives a random rating after the bot receives a fare&lt;/li>
&lt;/ul>
&lt;h4 id="database">Database&lt;/h4>
&lt;ul>
&lt;li>The database only stores driver ratings&lt;/li>
&lt;li>Storing other information is not necessary (yet)&lt;/li>
&lt;li>Use mysql or mongodb as your database&lt;/li>
&lt;/ul>
&lt;h4 id="other-instructions">Other instructions&lt;/h4>
&lt;ul>
&lt;li>You may use any programming language. However, &lt;strong>Node.js or Python or Go&lt;/strong> is recommended&lt;/li>
&lt;li>Frameworks/libraries can be used. However, it&amp;rsquo;s best not to use full-fledged frameworks. Simpler frameworks (like express/flask/gin) will make things easier&lt;/li>
&lt;li>Don&amp;rsquo;t implement extra features. Because later, distributing them in multiple instances could turn out to be a problem&lt;/li>
&lt;/ul>
&lt;h2 id="step-2-service-into-microservices">Step 2: Service into microservices&lt;/h2>
&lt;p>If you have completed step 1, congratulations! By now you have learned how to-&lt;/p>
&lt;ul>
&lt;li>make APIs and call them&lt;/li>
&lt;li>make sockets for bidirectional communication&lt;/li>
&lt;li>make schedulers that call a function periodically&lt;/li>
&lt;li>integrate database with an application&lt;/li>
&lt;/ul>
&lt;p>If you have done all that, kudos to you! You are now ready to start building microservices (or more like breaking an app into microservices).&lt;/p>
&lt;h3 id="requirements-1">Requirements&lt;/h3>
&lt;p>Let&amp;rsquo;s recap what modules we have in our backend system so far:&lt;/p>
&lt;ul>
&lt;li>a rider module&lt;/li>
&lt;li>a driver module&lt;/li>
&lt;li>a rider/driver matching module&lt;/li>
&lt;li>a rating module connecting to a database&lt;/li>
&lt;li>a communication module for bidirectional communication&lt;/li>
&lt;/ul>
&lt;p>We&amp;rsquo;ll convert these modules to make three business services.&lt;/p>
&lt;ol>
&lt;li>Ride sharing service
&lt;ul>
&lt;li>rider module&lt;/li>
&lt;li>driver module&lt;/li>
&lt;li>rider/driver matching module&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Communication service&lt;/li>
&lt;li>Rating service&lt;/li>
&lt;/ol>
&lt;p>Our system architecture will be like the following.&lt;/p>
&lt;h3 id="architecture-1">Architecture&lt;/h3>
&lt;pre>&lt;code class="language-mermaid">graph TD
A --- C[&amp;quot;Communication service (socket.io)&amp;quot;]
A[&amp;quot;Client (Bot)&amp;quot;]--&amp;gt;B[&amp;quot;Reverse Proxy (Nginx)&amp;quot;]
B--&amp;gt;R[Ride sharing service]
B--&amp;gt;Ra[Rating service]
Ra--&amp;gt;D[(Database)]
R--&amp;gt;C
&lt;/code>&lt;/pre>
&lt;h3 id="what-to-do">What to do?&lt;/h3>
&lt;ol>
&lt;li>In your project folder, make sub projects. Each sub project will be a separate service.&lt;/li>
&lt;li>Download and configure nginx so that it works as a reverse proxy for all http services (in our case &lt;strong>ride sharing service&lt;/strong> and &lt;strong>rating service&lt;/strong>).&lt;/li>
&lt;li>For nginx configuration Google is your friend. You can also follow their official docs at &lt;a href="https://docs.nginx.com/nginx/admin-guide/basic-functionality/managing-configuration-files/" target="_blank" rel="noopener">docs.nginx.com&lt;/a>.&lt;/li>
&lt;li>Write additional code so that the services communicate among themselves and the business logic discussed in &lt;em>step 1&lt;/em> is served.&lt;/li>
&lt;/ol>
&lt;h2 id="step-3-containerize-and-orchestrate">Step 3: Containerize and orchestrate&lt;/h2>
&lt;p>If you have completed step 2, congratulations! You have successfully created a distributed system and have a gotten a flavor of how microservices work!&lt;/p>
&lt;p>In this step we will do three things in our app-&lt;/p>
&lt;ul>
&lt;li>&lt;strong>containerize&lt;/strong> the services that we made&lt;/li>
&lt;li>use &lt;strong>pre built containers&lt;/strong> for &lt;em>mysql/mongo&lt;/em> and &lt;em>nginx&lt;/em>&lt;/li>
&lt;li>orchestrate our services&lt;/li>
&lt;/ul>
&lt;h3 id="self-learning">Self Learning&lt;/h3>
&lt;p>First, you will need to learn about containerization and orchestration &lt;strong>with docker&lt;/strong>. You can watch the following tutorials-&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=Gjnup-PuquQ" target="_blank" rel="noopener">Docker in 100 seconds&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=gAkwW2tuIqE" target="_blank" rel="noopener">Docker in 7 easy steps&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=MVIcrmeV_6c" target="_blank" rel="noopener">Docker-compose tutorial&lt;/a>&lt;/li>
&lt;li>And please, Google some stuff yourself&lt;/li>
&lt;/ul>
&lt;p>Once you understand the fundamentals, you can refer to &lt;a href="https://rafed.github.io/devra/posts/docker/useful-docker-commands/" target="_blank" rel="noopener">this manual&lt;/a> to run the most commonly used docker commands.&lt;/p>
&lt;p>Additionally, check out &lt;a href="https://github.com/rafed/nginx-flask-docker" target="_blank" rel="noopener">this repo&lt;/a> for a demo web app that&amp;rsquo;s load balanced, containerized and orchestrated with docker.&lt;/p>
&lt;h3 id="what-to-do-1">What to do?&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>Write a Dockerfile&lt;/strong> for each of the following service in their respective sub-project folder
&lt;ul>
&lt;li>ride sharing service&lt;/li>
&lt;li>rating servie&lt;/li>
&lt;li>communication service&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Write a docker-compose.yml file in the root project folder to orchestrate all of the services&lt;/li>
&lt;/ol>
&lt;h4 id="other-instructions-1">Other instructions&lt;/h4>
&lt;ol>
&lt;li>No change in the application code is necessary (Except maybe port numbers. You may want to reassign them).&lt;/li>
&lt;li>Windows cannot handle docker containers properly (even though Docker claims that they have support for windows). Use a Linux environment to run docker containers.&lt;/li>
&lt;/ol>
&lt;h2 id="step-4-geo-distribute-the-app">Step 4: Geo distribute the app&lt;/h2>
&lt;p>Our ride sharing app is becoming popular! We now want to go global!&lt;/p>
&lt;h3 id="architecture-2">Architecture&lt;/h3>
&lt;pre>&lt;code class="language-mermaid">graph TD
CD[&amp;quot;Client (Dhaka)&amp;quot;] --&amp;gt; ND[&amp;quot;Proxy (Dhaka)&amp;quot;]
CC[&amp;quot;Client (Chittagong)&amp;quot;] --&amp;gt; NC[&amp;quot;Proxy (Chittagong)&amp;quot;]
CD --&amp;gt; DNS[&amp;quot;DNS&amp;quot;]
CC --&amp;gt; DNS
ND --&amp;gt; RSSD[&amp;quot;Ride service (Dhaka)&amp;quot;]
ND --&amp;gt; RSD[&amp;quot;Rating service (Dhaka)&amp;quot;]
RSSD --&amp;gt; CSD[&amp;quot;Communication service (Dhaka)&amp;quot;]
CD --- CSD
RSD --&amp;gt; DBD[(&amp;quot;DB (Dhaka)&amp;quot;)]
NC --&amp;gt; RSSC[&amp;quot;Ride service (Chitt)&amp;quot;]
NC --&amp;gt; RSD
RSSC --&amp;gt; CSC[&amp;quot;Communication service (Chitt)&amp;quot;]
CC --- CSC
&lt;/code>&lt;/pre>
&lt;h2 id="step-5-more-development-bonus">Step 5: More development (Bonus)&lt;/h2>
&lt;h4 id="step-51-use-an-in-memory-database">Step 5.1: Use an in memory database&lt;/h4>
&lt;p>Our app has a big problem. The rider and driver list is stored in an array in memory. Imagine what will happen if we wanted to increase availability by creating multiple instances of the &amp;ldquo;Ride sharing service&amp;rdquo;. Can you figure out the problem?&lt;/p>
&lt;p>To solve this, instead of storing the data in memory, store it inside a redis container. The rider/driver matcher should pull data from the redis cache. (You may need to separate the rider/driver pair matcher to a separate service).&lt;/p>
&lt;h4 id="step-52-send-emails-with-message-queueing">Step 5.2: Send emails with message queueing&lt;/h4>
&lt;p>We need to do email marketing to our customers to let them know about our latest upgrades and features. Do this by:&lt;/p>
&lt;ol>
&lt;li>Install a rabbitmq container (rabbitmq is a message queue broker)&lt;/li>
&lt;li>Make a email service that has
&lt;ul>
&lt;li>a push to broker function to push addresses to the broker&lt;/li>
&lt;li>a &amp;ldquo;send email function&amp;rdquo; that periodically sends emails to the addresses stored in the message broker&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol></description></item><item><title>Facebook backend: From monolith to microservices</title><link>https://rafed.github.io/courses/distributed-systems/lab/microservice-facebook/</link><pubDate>Sat, 20 Aug 2022 00:00:00 +0000</pubDate><guid>https://rafed.github.io/courses/distributed-systems/lab/microservice-facebook/</guid><description>&lt;h2 id="goal">Goal&lt;/h2>
&lt;p>Your task is to build a monolithic web based system. Then, break down the system into microservices following the microservice architecture. To acheive this follow the steps below.&lt;/p>
&lt;h2 id="step-1-build-a-server-and-a-client">Step 1: Build a server and a client&lt;/h2>
&lt;p>You will build a rudimentary version of &lt;strong>Facebook&lt;/strong>. The app itself should not be complex as we are here to build a distributed system and not a full featured social media app.&lt;/p>
&lt;h3 id="architecture">Architecture&lt;/h3>
&lt;pre>&lt;code class="language-mermaid">graph TD
CLIENT[Client]--&amp;gt;SERVER[Server]
SERVER--&amp;gt;DB[(Database)]
SERVER--&amp;gt;OBJ_DB[(Object DB)]
&lt;/code>&lt;/pre>
&lt;h3 id="requirements">Requirements&lt;/h3>
&lt;h4 id="client-requirements">Client Requirements&lt;/h4>
&lt;p>The client UI will have three routes:&lt;/p>
&lt;ul>
&lt;li>Registration page&lt;/li>
&lt;li>Login page&lt;/li>
&lt;li>News feed page. A news feed will have
&lt;ul>
&lt;li>A horizontal list of stories at the top (images only)&lt;/li>
&lt;li>Status from different users (texts only, no comments)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="server-requirements">Server requirements&lt;/h4>
&lt;h5 id="apis">APIS&lt;/h5>
&lt;ul>
&lt;li>&lt;strong>/register&lt;/strong> endpoint for creating new users
&lt;ul>
&lt;li>user registers with email and password&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>/login&lt;/strong> endpoint for logging (with JWT)
&lt;ul>
&lt;li>user logs in with email and password&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>/status&lt;/strong> endpoint for creating and retrieving status
&lt;ul>
&lt;li>GET: Get latest 10 statuses of all users except logged in user&lt;/li>
&lt;li>POST: Create new status for user&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>/story&lt;/strong> endpoint for creating and retrieving stories
&lt;ul>
&lt;li>GET: Get latest 10 stories of all users except logged in user&lt;/li>
&lt;li>POST: Create new story for user&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h5 id="system-assumptions">System assumptions&lt;/h5>
&lt;ul>
&lt;li>All users are friends by default&lt;/li>
&lt;li>The system needs no other services (e.g. messenger, poke, react)&lt;/li>
&lt;/ul>
&lt;h4 id="other-instructions">Other instructions&lt;/h4>
&lt;ul>
&lt;li>Images uploaded in stories should be stored in an object store database (MinIO)&lt;/li>
&lt;li>Frameworks/libraries can be used. However, using frameworks (like express/flask/fastapi/gin) will make the assignment easier.&lt;/li>
&lt;li>Using a framework on the frontend can be useful (angular/vue/react).&lt;/li>
&lt;li>Don&amp;rsquo;t implement extra features. Because, distributing them in multiple instances could turn out to be a problem later.&lt;/li>
&lt;li>You may use any programming language. However, &lt;strong>Node.js or Python or Go&lt;/strong> is recommended.&lt;/li>
&lt;/ul>
&lt;h2 id="step-2-service-into-microservices">Step 2: Service into microservices&lt;/h2>
&lt;p>If you have completed step 1, congratulations! By now you have learned how to-&lt;/p>
&lt;ul>
&lt;li>make APIs and call them (from a frontend)&lt;/li>
&lt;li>integrate database with an application&lt;/li>
&lt;li>use an object store database&lt;/li>
&lt;/ul>
&lt;p>If you have done all that, kudos! You are now ready to start building microservices (or more like breaking an app into microservices).&lt;/p>
&lt;h3 id="requirements-1">Requirements&lt;/h3>
&lt;p>Let&amp;rsquo;s recap what modules we have in our backend system so far:&lt;/p>
&lt;ul>
&lt;li>a Reg &amp;amp; Auth module&lt;/li>
&lt;li>a Story module&lt;/li>
&lt;li>a Status module&lt;/li>
&lt;/ul>
&lt;p>Currently these modules serve from a single monolith. We need to segregate them to the following services.&lt;/p>
&lt;ol>
&lt;li>User service
&lt;ul>
&lt;li>Registration&lt;/li>
&lt;li>Login&lt;/li>
&lt;li>Authentication&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Status service&lt;/li>
&lt;li>Story service&lt;/li>
&lt;/ol>
&lt;p>Our system architecture will be like the following.&lt;/p>
&lt;h3 id="architecture-1">Architecture&lt;/h3>
&lt;pre>&lt;code class="language-mermaid">graph TD
CLIENT[&amp;quot;Client&amp;quot;]--&amp;gt;PROXY[&amp;quot;Reverse Proxy (Nginx)&amp;quot;]
PROXY--&amp;gt;USER[User service]
PROXY--&amp;gt;STATUS[Status service]
PROXY--&amp;gt;STORY[Story service]
USER--&amp;gt;USER_DB[(User DB)]
STATUS--&amp;gt;STATUS_DB[(Status DB)]
STATUS--&amp;gt;USER
STORY--&amp;gt;STORY_DB[(Story DB)]
STORY--&amp;gt;OBJECT_DB[(Object DB)]
STORY--&amp;gt;USER
&lt;/code>&lt;/pre>
&lt;h3 id="what-to-do">What to do?&lt;/h3>
&lt;ol>
&lt;li>In your project folder, make sub projects. Each sub project will be a separate service.&lt;/li>
&lt;li>Download and configure nginx so that it works as a reverse proxy for all the services&lt;/li>
&lt;li>For nginx configuration Google is your friend. You can also follow their official docs at &lt;a href="https://docs.nginx.com/nginx/admin-guide/basic-functionality/managing-configuration-files/" target="_blank" rel="noopener">docs.nginx.com&lt;/a>.&lt;/li>
&lt;li>Write additional code so that the services communicate among themselves and the business logic discussed in &lt;em>step 1&lt;/em> is served.
&lt;ul>
&lt;li>You may need to check requests for &lt;strong>authorization&lt;/strong> when a user hits &lt;strong>status service&lt;/strong> and &lt;strong>story service&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Although it&amp;rsquo;s a best practice to use separate database instances for each service, we will ignore it now for simplicity. Don&amp;rsquo;t worry we&amp;rsquo;ll segregate the database in some later steps.&lt;/li>
&lt;/ol>
&lt;h2 id="step-3-containerize-and-orchestrate">Step 3: Containerize and orchestrate&lt;/h2>
&lt;p>If you have completed step 2, congratulations! You have successfully created a distributed system and have a got a flavor of how microservices work!&lt;/p>
&lt;p>In this step we will do three things in our app-&lt;/p>
&lt;ul>
&lt;li>&lt;strong>containerize&lt;/strong> the services that we made&lt;/li>
&lt;li>use &lt;strong>pre built containers&lt;/strong> for &lt;em>mysql/mongo&lt;/em> and &lt;em>nginx&lt;/em>&lt;/li>
&lt;li>and &lt;strong>orchestrate&lt;/strong> our services&lt;/li>
&lt;/ul>
&lt;h3 id="self-learning">Self Learning&lt;/h3>
&lt;p>First, you will need to learn about containerization and orchestration &lt;strong>with docker&lt;/strong>. You can watch the following tutorials-&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=Gjnup-PuquQ" target="_blank" rel="noopener">Docker in 100 seconds&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=gAkwW2tuIqE" target="_blank" rel="noopener">Docker in 7 easy steps&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=MVIcrmeV_6c" target="_blank" rel="noopener">Docker-compose tutorial&lt;/a>&lt;/li>
&lt;li>And please, Google some stuff yourself&lt;/li>
&lt;/ul>
&lt;p>Once you understand the fundamentals, you can refer to &lt;a href="https://rafed.github.io/devra/posts/docker/useful-docker-commands/" target="_blank" rel="noopener">this manual&lt;/a> to run the most commonly used docker commands.&lt;/p>
&lt;!-- Additionally, check out [this repo](https://github.com/rafed/nginx-flask-docker) for a demo web app that's load balanced, containerized and orchestrated with docker. -->
&lt;h3 id="what-to-do-1">What to do?&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>Write a Dockerfile&lt;/strong> for each of the services in their respective directories
&lt;ul>
&lt;li>User service&lt;/li>
&lt;li>Status service&lt;/li>
&lt;li>Story service&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Write a docker-compose.yml&lt;/strong> file in the root project folder to orchestrate all of the services&lt;/li>
&lt;li>&lt;strong>Use separate database&lt;/strong> (containers) for each service&lt;/li>
&lt;/ol>
&lt;h4 id="other-instructions-1">Other instructions&lt;/h4>
&lt;ol>
&lt;li>No change in the application code is necessary (Except for maybe port numbers. You may want to reassign them).&lt;/li>
&lt;li>Windows cannot handle docker containers properly (even though Docker claims that they have support for windows). Use a Linux environment to run docker containers.&lt;/li>
&lt;/ol>
&lt;h2 id="step-4-deploy-in-a-swarm-coming-soon">Step 4: Deploy in a swarm (Coming Soon!)&lt;/h2></description></item><item><title>Nmap</title><link>https://rafed.github.io/talk/example/</link><pubDate>Sat, 01 Jun 2030 13:00:00 +0000</pubDate><guid>https://rafed.github.io/talk/example/</guid><description>&lt;div class="alert alert-note">
&lt;div>
Click on the &lt;strong>Slides&lt;/strong> button above to view the built-in slides feature.
&lt;/div>
&lt;/div>
&lt;p>Slides can be added in a few ways:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Create&lt;/strong> slides using Wowchemy&amp;rsquo;s &lt;a href="https://wowchemy.com/docs/managing-content/#create-slides" target="_blank" rel="noopener">&lt;em>Slides&lt;/em>&lt;/a> feature and link using &lt;code>slides&lt;/code> parameter in the front matter of the talk file&lt;/li>
&lt;li>&lt;strong>Upload&lt;/strong> an existing slide deck to &lt;code>static/&lt;/code> and link using &lt;code>url_slides&lt;/code> parameter in the front matter of the talk file&lt;/li>
&lt;li>&lt;strong>Embed&lt;/strong> your slides (e.g. Google Slides) or presentation video on this page using &lt;a href="https://wowchemy.com/docs/writing-markdown-latex/" target="_blank" rel="noopener">shortcodes&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>Further event details, including &lt;a href="https://wowchemy.com/docs/writing-markdown-latex/" target="_blank" rel="noopener">page elements&lt;/a> such as image galleries, can be added to the body of this page.&lt;/p></description></item><item><title>Microsoft Certified: Azure Fundamentals</title><link>https://rafed.github.io/achievement/certifications/azure-fundamentals/</link><pubDate>Wed, 09 Mar 2022 00:00:00 +0000</pubDate><guid>https://rafed.github.io/achievement/certifications/azure-fundamentals/</guid><description>&lt;p>I am very proud of this certificate as it is my first ever certification. Although I&amp;rsquo;m more experienced in AWS, I still decided to try my shot at azure. With a few days of learning I&amp;rsquo;m happy that I could achieve it. I hope this certification paves the way for me to learn and do more in the cloud realm.&lt;/p></description></item><item><title>Analyzing Program Comprehensibility of Go Projects</title><link>https://rafed.github.io/publication/06-comprego/</link><pubDate>Wed, 24 Mar 2021 00:00:00 +0000</pubDate><guid>https://rafed.github.io/publication/06-comprego/</guid><description>&lt;!-- &lt;div class="alert alert-note">
&lt;div>
Click the &lt;em>Cite&lt;/em> button above to demo the feature to enable visitors to import publication metadata into their reference management software.
&lt;/div>
&lt;/div>
-->
&lt;!-- &lt;div class="alert alert-note">
&lt;div>
Create your slides in Markdown - click the &lt;em>Slides&lt;/em> button to check out the example.
&lt;/div>
&lt;/div>
-->
&lt;!-- Supplementary notes can be added here, including [code, math, and images](https://wowchemy.com/docs/writing-markdown-latex/). --></description></item><item><title>TEQ</title><link>https://rafed.github.io/project/teq/</link><pubDate>Mon, 01 Mar 2021 00:00:00 +0000</pubDate><guid>https://rafed.github.io/project/teq/</guid><description>&lt;p>TEQ is a bus management admin panel developed and maintained by Brainstation-23 for Ferdia, Norway. I worked in this project as a backend and devops engineer. My responsibilities included operating Kubernetes cluster, managing AWS resources and creating CI/CD pipelines.&lt;/p>
&lt;p>My responsibilities include:&lt;/p>
&lt;ul>
&lt;li>Work as a backend engineer (Python, Django)&lt;/li>
&lt;li>DevOps Engineer:
&lt;ul>
&lt;li>Operate kubernetes cluster&lt;/li>
&lt;li>Manage AWS resources&lt;/li>
&lt;li>Create pipelines&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>BlogRa</title><link>https://rafed.github.io/project/blogra/</link><pubDate>Fri, 12 Feb 2021 00:00:00 +0000</pubDate><guid>https://rafed.github.io/project/blogra/</guid><description>&lt;p>BlogRa is a tech blogging theme for Hugo. I did not find the existing themes for Hugo suitable for my blogging experience. So I made this for myself.&lt;/p>
&lt;p>Check it out. A star on the repo would be much appreciated.&lt;/p></description></item><item><title>How Well Does Undergraduate Education Prepare Software Engineers? Perspectives of Practitioners in Bangladesh</title><link>https://rafed.github.io/publication/04-how-well-does-undergraduate-education/</link><pubDate>Sun, 08 Nov 2020 00:00:00 +0000</pubDate><guid>https://rafed.github.io/publication/04-how-well-does-undergraduate-education/</guid><description>&lt;!-- &lt;div class="alert alert-note">
&lt;div>
Click the &lt;em>Cite&lt;/em> button above to demo the feature to enable visitors to import publication metadata into their reference management software.
&lt;/div>
&lt;/div>
&lt;div class="alert alert-note">
&lt;div>
Create your slides in Markdown - click the &lt;em>Slides&lt;/em> button to check out the example.
&lt;/div>
&lt;/div>
Supplementary notes can be added here, including [code, math, and images](https://wowchemy.com/docs/writing-markdown-latex/). --></description></item><item><title>Ramium</title><link>https://rafed.github.io/project/ramium/</link><pubDate>Sun, 03 May 2020 00:00:00 +0000</pubDate><guid>https://rafed.github.io/project/ramium/</guid><description>&lt;p>After discovering Hugo (a static blog generator), I decided to make a theme for myself and Ramium was the result.&lt;/p>
&lt;p>Not really the best theme out there, but hey, it was a nice learning experience.&lt;/p>
&lt;p>I have made a better theme now called BlogRa, which I use for my personal tech blog. Check it out at &lt;a href="https://github.com/rafed/BlogRa" target="_blank" rel="noopener">github.com/rafed/BlogRa&lt;/a>&lt;/p></description></item><item><title>Exploring the Impact of Code Style in Identifying Good Programmers</title><link>https://rafed.github.io/publication/03-code-style/</link><pubDate>Sun, 05 Jan 2020 00:00:00 +0000</pubDate><guid>https://rafed.github.io/publication/03-code-style/</guid><description>&lt;!-- &lt;div class="alert alert-note">
&lt;div>
Click the &lt;em>Cite&lt;/em> button above to demo the feature to enable visitors to import publication metadata into their reference management software.
&lt;/div>
&lt;/div>
-->
&lt;!-- &lt;div class="alert alert-note">
&lt;div>
Create your slides in Markdown - click the &lt;em>Slides&lt;/em> button to check out the example.
&lt;/div>
&lt;/div>
-->
&lt;!-- Supplementary notes can be added here, including [code, math, and images](https://wowchemy.com/docs/writing-markdown-latex/). --></description></item><item><title>Defect Prediction Using Stylistic Metrics</title><link>https://rafed.github.io/publication/05-defect-prediction/</link><pubDate>Fri, 15 Nov 2019 00:00:00 +0000</pubDate><guid>https://rafed.github.io/publication/05-defect-prediction/</guid><description>&lt;!-- &lt;div class="alert alert-note">
&lt;div>
Click the &lt;em>Cite&lt;/em> button above to demo the feature to enable visitors to import publication metadata into their reference management software.
&lt;/div>
&lt;/div>
-->
&lt;!-- &lt;div class="alert alert-note">
&lt;div>
Create your slides in Markdown - click the &lt;em>Slides&lt;/em> button to check out the example.
&lt;/div>
&lt;/div>
-->
&lt;!-- Supplementary notes can be added here, including [code, math, and images](https://wowchemy.com/docs/writing-markdown-latex/). --></description></item><item><title>GodExpo: an automated god structure detection tool for Golang</title><link>https://rafed.github.io/publication/02-godexpo/</link><pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate><guid>https://rafed.github.io/publication/02-godexpo/</guid><description>&lt;!-- &lt;div class="alert alert-note">
&lt;div>
Click the &lt;em>Cite&lt;/em> button above to demo the feature to enable visitors to import publication metadata into their reference management software.
&lt;/div>
&lt;/div>
-->
&lt;!-- &lt;div class="alert alert-note">
&lt;div>
Create your slides in Markdown - click the &lt;em>Slides&lt;/em> button to check out the example.
&lt;/div>
&lt;/div>
-->
&lt;!-- Supplementary notes can be added here, including [code, math, and images](https://wowchemy.com/docs/writing-markdown-latex/). --></description></item><item><title>Traffic Congestion Prediction Using Machine Learning Techniques</title><link>https://rafed.github.io/publication/01-traffic-congestion/</link><pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate><guid>https://rafed.github.io/publication/01-traffic-congestion/</guid><description>&lt;!-- &lt;div class="alert alert-note">
&lt;div>
Click the &lt;em>Cite&lt;/em> button above to demo the feature to enable visitors to import publication metadata into their reference management software.
&lt;/div>
&lt;/div>
-->
&lt;!-- &lt;div class="alert alert-note">
&lt;div>
Create your slides in Markdown - click the &lt;em>Slides&lt;/em> button to check out the example.
&lt;/div>
&lt;/div>
-->
&lt;!-- Supplementary notes can be added here, including [code, math, and images](https://wowchemy.com/docs/writing-markdown-latex/). --></description></item><item><title>Slides</title><link>https://rafed.github.io/slides/example/</link><pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate><guid>https://rafed.github.io/slides/example/</guid><description>&lt;h1 id="create-slides-in-markdown-with-wowchemy">Create slides in Markdown with Wowchemy&lt;/h1>
&lt;p>&lt;a href="https://wowchemy.com/" target="_blank" rel="noopener">Wowchemy&lt;/a> | &lt;a href="https://owchemy.com/docs/managing-content/#create-slides" target="_blank" rel="noopener">Documentation&lt;/a>&lt;/p>
&lt;hr>
&lt;h2 id="features">Features&lt;/h2>
&lt;ul>
&lt;li>Efficiently write slides in Markdown&lt;/li>
&lt;li>3-in-1: Create, Present, and Publish your slides&lt;/li>
&lt;li>Supports speaker notes&lt;/li>
&lt;li>Mobile friendly slides&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="controls">Controls&lt;/h2>
&lt;ul>
&lt;li>Next: &lt;code>Right Arrow&lt;/code> or &lt;code>Space&lt;/code>&lt;/li>
&lt;li>Previous: &lt;code>Left Arrow&lt;/code>&lt;/li>
&lt;li>Start: &lt;code>Home&lt;/code>&lt;/li>
&lt;li>Finish: &lt;code>End&lt;/code>&lt;/li>
&lt;li>Overview: &lt;code>Esc&lt;/code>&lt;/li>
&lt;li>Speaker notes: &lt;code>S&lt;/code>&lt;/li>
&lt;li>Fullscreen: &lt;code>F&lt;/code>&lt;/li>
&lt;li>Zoom: &lt;code>Alt + Click&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://github.com/hakimel/reveal.js#pdf-export" target="_blank" rel="noopener">PDF Export&lt;/a>: &lt;code>E&lt;/code>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="code-highlighting">Code Highlighting&lt;/h2>
&lt;p>Inline code: &lt;code>variable&lt;/code>&lt;/p>
&lt;p>Code block:&lt;/p>
&lt;pre>&lt;code class="language-python">porridge = &amp;quot;blueberry&amp;quot;
if porridge == &amp;quot;blueberry&amp;quot;:
print(&amp;quot;Eating...&amp;quot;)
&lt;/code>&lt;/pre>
&lt;hr>
&lt;h2 id="math">Math&lt;/h2>
&lt;p>In-line math: $x + y = z$&lt;/p>
&lt;p>Block math:&lt;/p>
&lt;p>$$
f\left( x \right) = ;\frac{{2\left( {x + 4} \right)\left( {x - 4} \right)}}{{\left( {x + 4} \right)\left( {x + 1} \right)}}
$$&lt;/p>
&lt;hr>
&lt;h2 id="fragments">Fragments&lt;/h2>
&lt;p>Make content appear incrementally&lt;/p>
&lt;pre>&lt;code>{{% fragment %}} One {{% /fragment %}}
{{% fragment %}} **Two** {{% /fragment %}}
{{% fragment %}} Three {{% /fragment %}}
&lt;/code>&lt;/pre>
&lt;p>Press &lt;code>Space&lt;/code> to play!&lt;/p>
&lt;span class="fragment " >
One
&lt;/span>
&lt;span class="fragment " >
**Two**
&lt;/span>
&lt;span class="fragment " >
Three
&lt;/span>
&lt;hr>
&lt;p>A fragment can accept two optional parameters:&lt;/p>
&lt;ul>
&lt;li>&lt;code>class&lt;/code>: use a custom style (requires definition in custom CSS)&lt;/li>
&lt;li>&lt;code>weight&lt;/code>: sets the order in which a fragment appears&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="speaker-notes">Speaker Notes&lt;/h2>
&lt;p>Add speaker notes to your presentation&lt;/p>
&lt;pre>&lt;code class="language-markdown">{{% speaker_note %}}
- Only the speaker can read these notes
- Press `S` key to view
{{% /speaker_note %}}
&lt;/code>&lt;/pre>
&lt;p>Press the &lt;code>S&lt;/code> key to view the speaker notes!&lt;/p>
&lt;aside class="notes">
&lt;ul>
&lt;li>Only the speaker can read these notes&lt;/li>
&lt;li>Press &lt;code>S&lt;/code> key to view&lt;/li>
&lt;/ul>
&lt;/aside>
&lt;hr>
&lt;h2 id="themes">Themes&lt;/h2>
&lt;ul>
&lt;li>black: Black background, white text, blue links (default)&lt;/li>
&lt;li>white: White background, black text, blue links&lt;/li>
&lt;li>league: Gray background, white text, blue links&lt;/li>
&lt;li>beige: Beige background, dark text, brown links&lt;/li>
&lt;li>sky: Blue background, thin dark text, blue links&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>night: Black background, thick white text, orange links&lt;/li>
&lt;li>serif: Cappuccino background, gray text, brown links&lt;/li>
&lt;li>simple: White background, black text, blue links&lt;/li>
&lt;li>solarized: Cream-colored background, dark green text, blue links&lt;/li>
&lt;/ul>
&lt;hr>
&lt;section data-noprocess data-shortcode-slide
data-background-image="/media/boards.jpg"
>
&lt;h2 id="custom-slide">Custom Slide&lt;/h2>
&lt;p>Customize the slide style and background&lt;/p>
&lt;pre>&lt;code class="language-markdown">{{&amp;lt; slide background-image=&amp;quot;/media/boards.jpg&amp;quot; &amp;gt;}}
{{&amp;lt; slide background-color=&amp;quot;#0000FF&amp;quot; &amp;gt;}}
{{&amp;lt; slide class=&amp;quot;my-style&amp;quot; &amp;gt;}}
&lt;/code>&lt;/pre>
&lt;hr>
&lt;h2 id="custom-css-example">Custom CSS Example&lt;/h2>
&lt;p>Let&amp;rsquo;s make headers navy colored.&lt;/p>
&lt;p>Create &lt;code>assets/css/reveal_custom.css&lt;/code> with:&lt;/p>
&lt;pre>&lt;code class="language-css">.reveal section h1,
.reveal section h2,
.reveal section h3 {
color: navy;
}
&lt;/code>&lt;/pre>
&lt;hr>
&lt;h1 id="questions">Questions?&lt;/h1>
&lt;p>&lt;a href="https://github.com/wowchemy/wowchemy-hugo-modules/discussions" target="_blank" rel="noopener">Ask&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://wowchemy.com/docs/managing-content/#create-slides" target="_blank" rel="noopener">Documentation&lt;/a>&lt;/p></description></item><item><title>Virtual Trial Room</title><link>https://rafed.github.io/project/virtual-trial-room/</link><pubDate>Wed, 05 Dec 2018 00:00:00 +0000</pubDate><guid>https://rafed.github.io/project/virtual-trial-room/</guid><description>&lt;p>Virtual Trial Room is one of my most successful projects. It is a browser based trial room for wearing clothes virtually.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="Virtual Trial Room Girls Dress" srcset="
/project/virtual-trial-room/ss1_hu46034fe326927df75f69739041a94218_561298_926eba2be4398290cf8bd6bbdaaab047.webp 400w,
/project/virtual-trial-room/ss1_hu46034fe326927df75f69739041a94218_561298_76666524027738adf42909b9925a73a0.webp 760w,
/project/virtual-trial-room/ss1_hu46034fe326927df75f69739041a94218_561298_1200x1200_fit_q75_h2_lanczos_3.webp 1200w"
src="https://rafed.github.io/project/virtual-trial-room/ss1_hu46034fe326927df75f69739041a94218_561298_926eba2be4398290cf8bd6bbdaaab047.webp"
width="760"
height="353"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>This project won several awards-&lt;/p>
&lt;ol>
&lt;li>Champions, NSU Technovation Hackathon 2018, North South University&lt;/li>
&lt;li>Joint Runners Up, NSU Cybernauts, North South University Computer &amp;amp; Engineering Club (NSU CEC)&lt;/li>
&lt;li>Second Runners Up, Technival 2018, Khulna University of Engineering and Technology (KUET)&lt;/li>
&lt;li>Second Runners Up, Inter University Project Show, CSE Fest, Bangladesh University of Engineering and Technology (BUET)&lt;/li>
&lt;/ol>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="Virtual Trial Room Glasses" srcset="
/project/virtual-trial-room/ss2_hu3f072d613220ec362925cd3726057bb6_456300_38b404b89070685930c7e47ada5beb3b.webp 400w,
/project/virtual-trial-room/ss2_hu3f072d613220ec362925cd3726057bb6_456300_63086cc2e41560f28cbda487289825fe.webp 760w,
/project/virtual-trial-room/ss2_hu3f072d613220ec362925cd3726057bb6_456300_1200x1200_fit_q75_h2_lanczos_3.webp 1200w"
src="https://rafed.github.io/project/virtual-trial-room/ss2_hu3f072d613220ec362925cd3726057bb6_456300_38b404b89070685930c7e47ada5beb3b.webp"
width="760"
height="376"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>This project also got featured on &lt;a href="https://www.youtube.com/watch?v=Bpd7cbYMJns" target="_blank" rel="noopener">BBC Click&lt;/a>.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="Virtual Trial Room Hats" srcset="
/project/virtual-trial-room/ss3_hu7b56e6999a17ba1b48d58559fc1e7609_519632_4b799cf01dfce12d1ea181473dcd1ed4.webp 400w,
/project/virtual-trial-room/ss3_hu7b56e6999a17ba1b48d58559fc1e7609_519632_2a946ffa2d8d7f4a0ae5ad0bf5f6a389.webp 760w,
/project/virtual-trial-room/ss3_hu7b56e6999a17ba1b48d58559fc1e7609_519632_1200x1200_fit_q75_h2_lanczos_3.webp 1200w"
src="https://rafed.github.io/project/virtual-trial-room/ss3_hu7b56e6999a17ba1b48d58559fc1e7609_519632_4b799cf01dfce12d1ea181473dcd1ed4.webp"
width="760"
height="355"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>My talented friends who contributed to this project are:&lt;/p>
&lt;ul>
&lt;li>Moumita Asad&lt;/li>
&lt;li>Aquib Azmain&lt;/li>
&lt;/ul>
&lt;p>Technology used:&lt;/p>
&lt;ul>
&lt;li>Python&lt;/li>
&lt;li>Flask&lt;/li>
&lt;li>OpenCV&lt;/li>
&lt;/ul></description></item><item><title>Salimullah Hall Management System</title><link>https://rafed.github.io/project/sm-hall-management/</link><pubDate>Tue, 27 Nov 2018 00:00:00 +0000</pubDate><guid>https://rafed.github.io/project/sm-hall-management/</guid><description>&lt;p>Salimullah Hall Management System is a web application to digitize the activities of Salimullah Hall, University of Dhaka. Our entire university batch contributed in developing this app in our final semester. Through the app the following activities can be done:&lt;/p>
&lt;ul>
&lt;li>Student management&lt;/li>
&lt;li>Employee management&lt;/li>
&lt;li>Inventory management&lt;/li>
&lt;li>Accounting&lt;/li>
&lt;li>Residence management&lt;/li>
&lt;li>User management&lt;/li>
&lt;/ul>
&lt;p>Technology used:&lt;/p>
&lt;ul>
&lt;li>Python&lt;/li>
&lt;li>Flask&lt;/li>
&lt;li>Angular&lt;/li>
&lt;li>MariaDB&lt;/li>
&lt;/ul></description></item><item><title>ScanF - A web application security assessment tool</title><link>https://rafed.github.io/project/scanf/</link><pubDate>Tue, 27 Nov 2018 00:00:00 +0000</pubDate><guid>https://rafed.github.io/project/scanf/</guid><description>&lt;p>canF is a vulnerability assessment tool aimed at assisting
penetration testers to easily carry out XSS and SQLi attacks for discovering vulnerabilities.&lt;/p>
&lt;p>Technology used:&lt;/p>
&lt;ul>
&lt;li>Python&lt;/li>
&lt;li>Flask&lt;/li>
&lt;li>Selenium&lt;/li>
&lt;li>Vue&lt;/li>
&lt;/ul></description></item><item><title>Showme - ICSE SCORE</title><link>https://rafed.github.io/project/showme/</link><pubDate>Sat, 15 Sep 2018 00:00:00 +0000</pubDate><guid>https://rafed.github.io/project/showme/</guid><description>&lt;p>Showme is a tool that shows research related work of a paper by showing its citation graph. It was made for the SCORE competition in ICSE 2018 and it made to the &lt;strong>final six&lt;/strong>. Other awesome members who also contributed to the project:&lt;/p>
&lt;ul>
&lt;li>Kishan Kumar Ganguly&lt;/li>
&lt;li>Moumita Asad&lt;/li>
&lt;li>Aquib Azmain&lt;/li>
&lt;/ul>
&lt;p>Technology used:&lt;/p>
&lt;ul>
&lt;li>Python&lt;/li>
&lt;li>Flask&lt;/li>
&lt;li>Angular&lt;/li>
&lt;/ul></description></item><item><title>Second runners up, Inter university project show</title><link>https://rafed.github.io/achievement/awards/04-buet-cse-fest/</link><pubDate>Thu, 10 May 2018 00:00:00 +0000</pubDate><guid>https://rafed.github.io/achievement/awards/04-buet-cse-fest/</guid><description>&lt;p>BUET CSE fest was yet another win for our virtual trial room project. Being able to take away a prize from the strong contenders of BUET is really an achievement to remember.&lt;/p>
&lt;p>Project: Virtual Trial Room&lt;/p>
&lt;p>Team members:&lt;/p>
&lt;ul>
&lt;li>Rafed Muhammad Yasir&lt;/li>
&lt;li>Aquib Azmain&lt;/li>
&lt;li>Moumita Asad&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="./certificate.png" alt="participation certificate, Inter university project show" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p></description></item><item><title>Second Runners Up, Project Showcasing</title><link>https://rafed.github.io/achievement/awards/03-kuet-technival/</link><pubDate>Sat, 21 Apr 2018 00:00:00 +0000</pubDate><guid>https://rafed.github.io/achievement/awards/03-kuet-technival/</guid><description>&lt;p>KUET technival was the biggest compeition we faced so far in terms of number of participants. It was a hard competition and we managed a 2nd runners up.&lt;/p>
&lt;p>Project: Virtual Trial Room&lt;/p>
&lt;p>Team members:&lt;/p>
&lt;ul>
&lt;li>Rafed Muhammad Yasir&lt;/li>
&lt;li>Moumita Asad&lt;/li>
&lt;li>Aquib Azmain&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="./certificate.png" alt="Second runners up, Technival 2018" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p></description></item><item><title>Joint Runners Up, Senior Project Showcasing</title><link>https://rafed.github.io/achievement/awards/02-nsu-cybernauts/</link><pubDate>Thu, 22 Mar 2018 00:00:00 +0000</pubDate><guid>https://rafed.github.io/achievement/awards/02-nsu-cybernauts/</guid><description>&lt;p>Another achievement from NSU! A bit unlucky we even had to share the position of runners up. Apart from that it was an event to enjoy!&lt;/p>
&lt;p>Also got lucky to give my first tv interview ever and that too on &lt;a href="https://www.youtube.com/watch?v=Bpd7cbYMJns" target="_blank" rel="noopener">BBC click!&lt;/a>&lt;/p>
&lt;p>Project: Virtual Trial Room&lt;/p>
&lt;p>Team members:&lt;/p>
&lt;ul>
&lt;li>Rafed Muhammad Yasir&lt;/li>
&lt;li>Moumita Asad&lt;/li>
&lt;li>Aquib Azmain&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="./certificate.png" alt="Joint Runners Up, NSU Cybernauts 2018" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p></description></item><item><title>Champions, Hackathon</title><link>https://rafed.github.io/achievement/awards/01-nsu-technovation/</link><pubDate>Sat, 24 Feb 2018 00:00:00 +0000</pubDate><guid>https://rafed.github.io/achievement/awards/01-nsu-technovation/</guid><description>&lt;p>Our first ever hackathon and our first ever victory being champions. It was a moment to remember at NSU.&lt;/p>
&lt;p>Project: Virtual Trial Room&lt;/p>
&lt;p>Team members:&lt;/p>
&lt;ul>
&lt;li>Rafed Muhammad Yasir&lt;/li>
&lt;li>Moumita Asad&lt;/li>
&lt;li>Shuvo Saha&lt;/li>
&lt;li>Fazle Rabbi&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="./certificate.png" alt="Champions, NSU Technovation Hackathon 2018" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p></description></item><item><title>8-puzzle Solver</title><link>https://rafed.github.io/project/8-puzzle/</link><pubDate>Sat, 05 Aug 2017 00:00:00 +0000</pubDate><guid>https://rafed.github.io/project/8-puzzle/</guid><description>&lt;p>8-puzzle solver using A* search algorithm, implemented in Java. This was a class assignment.&lt;/p></description></item><item><title>Syncer - A File Syncing Software for Desktop</title><link>https://rafed.github.io/project/syncer/</link><pubDate>Sat, 27 May 2017 00:00:00 +0000</pubDate><guid>https://rafed.github.io/project/syncer/</guid><description>&lt;p>Syncer is a file syncing software for Desktop platforms. It is a dropbox clone made for our Software Project Lab-2 (SPL-2) course requirement. My wonderful teammate Moumita Asad was also involved in this project.&lt;/p>
&lt;p>Technology used:&lt;/p>
&lt;ul>
&lt;li>Java&lt;/li>
&lt;/ul></description></item><item><title>Hostman - A PCAP analyzer</title><link>https://rafed.github.io/project/hostman/</link><pubDate>Thu, 30 Jun 2016 00:00:00 +0000</pubDate><guid>https://rafed.github.io/project/hostman/</guid><description>&lt;p>Hostman is a CLI tool that can parse PCAP files and show the details of packets traversing through a network. The project is completely written in C. No libraries were used.&lt;/p>
&lt;p>It is my first software project ever. It was done as a requirement for the sotware project lab-1 (SPL-1) course.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="./ss1.png" alt="hostman packet details" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p></description></item><item><title>ChitChat</title><link>https://rafed.github.io/project/chitchat/</link><pubDate>Sat, 05 Sep 2015 00:00:00 +0000</pubDate><guid>https://rafed.github.io/project/chitchat/</guid><description>&lt;p>A server/client app for chatting over the internet.&lt;/p></description></item><item><title>Achievements</title><link>https://rafed.github.io/achievements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rafed.github.io/achievements/</guid><description/></item><item><title>Experience</title><link>https://rafed.github.io/experience/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rafed.github.io/experience/</guid><description/></item><item><title>Other Activities</title><link>https://rafed.github.io/other/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rafed.github.io/other/</guid><description/></item><item><title>Projects</title><link>https://rafed.github.io/projects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rafed.github.io/projects/</guid><description/></item><item><title>Skills</title><link>https://rafed.github.io/skills/development/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rafed.github.io/skills/development/</guid><description/></item><item><title>Skills</title><link>https://rafed.github.io/skills/devops/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rafed.github.io/skills/devops/</guid><description/></item><item><title>Skills</title><link>https://rafed.github.io/skills/ml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rafed.github.io/skills/ml/</guid><description/></item><item><title>Skills</title><link>https://rafed.github.io/skills/security/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rafed.github.io/skills/security/</guid><description/></item></channel></rss>