[{"authors":null,"categories":null,"content":"Rafed is a software engineering grad student at the Department of Informatics, University of California, Irvine. He is currently doing a summer internship as a Platform Engineer at ResMed and previously worked as a DevOps engineer at Brainstation-23. His interests include DevOps, software engineering, software security, and machine learning. He is currently bored so consult him on software development or research work. If you\u0026rsquo;re bored, then consider reading his tech blog where he writes about his perspectives, techniques and skills in software engineering.\n","date":1664928e3,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1664928e3,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://rafed.github.io/author/rafed-muhammad-yasir/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/rafed-muhammad-yasir/","section":"authors","summary":"Rafed is a software engineering grad student at the Department of Informatics, University of California, Irvine. He is currently doing a summer internship as a Platform Engineer at ResMed and previously worked as a DevOps engineer at Brainstation-23.","tags":null,"title":"Rafed Muhammad Yasir","type":"authors"},{"authors":null,"categories":null,"content":"Python programming skills - Statistical concepts and how to apply them in practice - Gain experience with the Scikit, including data visualization with Plotly and data wrangling with Pandas --  Lecture 1: CourseIntro-Teamwork    Lecture 2: Intro to RE    Lecture 3: RE Fundamentals    Lecture 4: Product Vision    Lecture 5: Stakeholders \u0026#43; Elicitation - part 1    Lecture 6: Elicitation - part 2    Lecture 7: Documenting Requirements    Lecture 8: Specifying with Natural Language    Lecture 9: RE Processes    Lecture 10: Use Cases    Lecture 11: Management and Traceability    Lecture 12: RE for AI    Lecture 13: RE Guidance    Lecture 14: Validation    Lecture 15: Agile RE    Lecture 16: Conclusion    -- Meet your instructor Rafed Muhammad Yasir Are there prerequisites? There are no prerequisites for the first course.\n How often do the courses run? Continuously, at your own pace.\n --  Begin the course   ","date":1704067200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1704067200,"objectID":"f381fbb4cc889663b78013c3f4a71121","permalink":"https://rafed.github.io/courses/requirements-engineering/","publishdate":"2024-01-01T00:00:00Z","relpermalink":"/courses/requirements-engineering/","section":"courses","summary":"University of California, Irvine (W24, Sp24)","tags":null,"title":"IN4MATX 113: Requirements Analysis and Engineering","type":"book"},{"authors":null,"categories":null,"content":"Python programming skills - Statistical concepts and how to apply them in practice - Gain experience with the Scikit, including data visualization with Plotly and data wrangling with Pandas --  Week 1 Assignment: Ethical Tech Starts With Addressing Ethical Debt Assignment: Ethics Defined Assignment: The A.I. Dilemma - Full Video Assignment: Zoombombing, Technology Ethics \u0026amp; Awful People Being Awful | An Introduction to Ethical Debt in Tech\n  Week 2 Assignment: Deontology Assignment: Moral Relativism Assignment: Superhuman Ethics Class With The Avengers Prime Assignment: Utilitarianism Assignment: Virtue Ethics Assignment: A Designer’s Code of Ethics\n  Week 3 Assignment: How China Is Using A.I. to Profile a Minority Assignment: My Journey Down the Rabbit Hole of Every Journalist’s Favorite App Assignment: Courts and Predictive Algorithms\n  Week 4  Assignment: Big Data and Its Exclusions Assignment: Big Data in 5 Minutes Assignment: Gender Shades   Week 5 Assignment: Ethics Unwrapped: Implicit Bias Assignment: Ethics, Geography, and Mapping Assignment: Mapping Justice As Transportation Assignment: A Data Designer’s Responsibility During a Global Crisis\n  Week 6 Assignment: How Dating Apps Became a Paradise for Predators Assignment: How Hinge\u0026rsquo;s Algorithm Picks Your Dates Assignment: Encode Justice Assignment: Meta’s Censorship of Health Ads for Women and People of Diverse Genders\n  Week 7  Assignment: Building Consentful Tech Assignment: In Our Own Words Assignment: Something is Wrong on the Internet Assignment: The Touchpoint Collective   Week 8  Assignment: #Gamergate and The Fappening: How Reddit’s Algorithm, Governance, and Culture Support Toxic Technocultures Assignment: The Secret Rules of the Internet: The Murky History of Moderation and How It Is Shaping the Future of Free Speech Assignment: Thoughts and Prayers: A Short Story About Trolling   -- Meet your instructor Rafed Muhammad Yasir Are there prerequisites? There are no prerequisites for the first course.\n How often do the courses run? Continuously, at your own pace.\n --  Begin the course   ","date":16956e5,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":16956e5,"objectID":"74f09b7b6400b7efdae83c9f2050142f","permalink":"https://rafed.github.io/courses/ethics-tech-design/","publishdate":"2023-09-25T00:00:00Z","relpermalink":"/courses/ethics-tech-design/","section":"courses","summary":"University of California, Irvine (F23)","tags":null,"title":"IN4MATX H81: Ethics, Technology, and Design","type":"book"},{"authors":null,"categories":null,"content":"This course\u0026rsquo;s resources are heavily lab-focused on developing distributed web apps. It is not a comprehensive guide to learning distributed systems.\nWhat you will learn An introduction to Distributed Systems from a Cloud-Based Perspective\nPython programming skills - Statistical concepts and how to apply them in practice - Gain experience with the Scikit, including data visualization with Plotly and data wrangling with Pandas -- Program overview Stil under construction.\n Theory Blah, blah, blah\u0026hellip;\n  Lab Blah, blah, blah\u0026hellip;\n  -- Meet your instructor Rafed Muhammad Yasir Are there prerequisites? There are no prerequisites for the first course.\n How often do the courses run? Continuously, at your own pace.\n --  Begin the course   ","date":169344e4,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":169344e4,"objectID":"7bd0ddd86a3cf0bc9cadf255c7179daa","permalink":"https://rafed.github.io/courses/distributed-systems/","publishdate":"2023-08-31T00:00:00Z","relpermalink":"/courses/distributed-systems/","section":"courses","summary":"IIT, University of Dhaka (2021-2023)","tags":null,"title":"CSE 601: Distributed Systems","type":"book"},{"authors":null,"categories":null,"content":"Code in Place: A free, human-centered, intro-to-coding course from Stanford University. More here\nPython programming skills - Statistical concepts and how to apply them in practice - Gain experience with the Scikit, including data visualization with Plotly and data wrangling with Pandas -- Meet your instructor Rafed Muhammad Yasir Link to Course Website https://codeinplace.stanford.edu/\nAre there prerequisites? There are no prerequisites for the first course.\n How often do the courses run? Continuously, at your own pace.\n --  Begin the course   ","date":1682553600,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1682553600,"objectID":"0a323aefee881d9435997ceff073105f","permalink":"https://rafed.github.io/courses/intro-to-python/","publishdate":"2023-04-27T00:00:00Z","relpermalink":"/courses/intro-to-python/","section":"courses","summary":"Stanford University, California (Sp23)","tags":null,"title":"CS106A: Intro to Python","type":"book"},{"authors":null,"categories":null,"content":"Sections  Introduction to Distributed systems A distributed system is a computing environment in which various components are spread across multiple computers (or other computing devices) on a network. The general notion of distribted system is:\n  Introduction to Microservices    System Design Golden Rules If we are dealing with a read-heavy system, it\u0026rsquo;s good to consider using a Cache. If we need low latency in the system, it\u0026rsquo;s good to consider using a Cache \u0026amp; CDN.\n  ","date":1612656e3,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1612656e3,"objectID":"45431c1790bff455ba35fe164bb0ff70","permalink":"https://rafed.github.io/courses/distributed-systems/theory/","publishdate":"2021-02-07T00:00:00Z","relpermalink":"/courses/distributed-systems/theory/","section":"courses","summary":"Blah, blah, blah...","tags":null,"title":"Theory","type":"book"},{"authors":null,"categories":null,"content":"Sections  Containerizing an App Goal You will build a simple web application and containerize it with docker. Follow the instructions in this Github repo to complete this task.\n  Creating a pipeline Goal You will learn to build a CI/CD pipeline using git, Github actions and Heroku. Instructions Follow the instructions in this Github repo to complete this task.\n  Ride sharing backend: From monolith to microservices Goal Your task is to build a distributed web system following the microservice architecture. It should be implemented following the steps below. Step 1: Build a simple server (and a client) You will build a rudimentary version of a Ride sharing app (like Uber/Pathao).\n  Facebook backend: From monolith to microservices Goal Your task is to build a monolithic web based system. Then, break down the system into microservices following the microservice architecture. To acheive this follow the steps below. Step 1: Build a server and a client You will build a rudimentary version of Facebook.\n  LinkedIn backend: From monolith to microservices Goal Your task is to build a monolithic web based system. Then, break down the system into microservices following the microservice architecture. To acheive this follow the steps below. Step 1: Build a server and a client You will create a basic version of LinkedIn.\n  ","date":1612656e3,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1612656e3,"objectID":"4f113652eec8ed327139eab22fd2412b","permalink":"https://rafed.github.io/courses/distributed-systems/lab/","publishdate":"2021-02-07T00:00:00Z","relpermalink":"/courses/distributed-systems/lab/","section":"courses","summary":"Blah, blah, blah...","tags":null,"title":"Lab","type":"book"},{"authors":null,"categories":null,"content":"A distributed system is a computing environment in which various components are spread across multiple computers (or other computing devices) on a network.\nThe general notion of distribted system is:\n If a machine can do a task in 2 hr, two machines can do it in 1 hr If a machine can store 1 GB data, two machines can store 2 GB data If a CC camera can look at 5 metres square, two cameras can look at 10 metres square  Examples of distributed systems  Machine learning (for compute) P2P file sharing (high availability, share large files, piracy) Google search engine (for storage and bandwidth) Facebook (for storage and bandwidth) Multiplayer games (entertainment) Space rockets (correctness) Black hole image (distributed observation) IOT (Sensors on a network) Blockchain (decentralized record of transactions)  ","date":1655424e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655424e3,"objectID":"6373c79cc711dcd915a5d810bf7e84b4","permalink":"https://rafed.github.io/courses/distributed-systems/theory/01-introduction/","publishdate":"2022-06-17T00:00:00Z","relpermalink":"/courses/distributed-systems/theory/01-introduction/","section":"courses","summary":"A distributed system is a computing environment in which various components are spread across multiple computers (or other computing devices) on a network.\nThe general notion of distribted system is:","tags":null,"title":"Introduction to Distributed systems","type":"book"},{"authors":null,"categories":null,"content":"Goal You will build a simple web application and containerize it with docker.\nFollow the instructions in this Github repo to complete this task.\n","date":1612656e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1612656e3,"objectID":"7aa95b6e1fcde0bd2ec28ec6e27eeeaf","permalink":"https://rafed.github.io/courses/distributed-systems/lab/containerization/","publishdate":"2021-02-07T00:00:00Z","relpermalink":"/courses/distributed-systems/lab/containerization/","section":"courses","summary":"Goal You will build a simple web application and containerize it with docker.\nFollow the instructions in this Github repo to complete this task.","tags":null,"title":"Containerizing an App","type":"book"},{"authors":null,"categories":null,"content":"  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"f6ad06463d722da1073e4104de1b2c13","permalink":"https://rafed.github.io/courses/requirements-engineering/sp24/lecture01/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/requirements-engineering/sp24/lecture01/","section":"courses","summary":"  ","tags":null,"title":"Lecture 1: CourseIntro-Teamwork","type":"book"},{"authors":null,"categories":null,"content":"  Assignment: Ethical Tech Starts With Addressing Ethical Debt\n  Assignment: Ethics Defined\n  Assignment: The A.I. Dilemma - Full Video\n  Assignment: Zoombombing, Technology Ethics \u0026amp; Awful People Being Awful | An Introduction to Ethical Debt in Tech\n  Assignment: Cat Pictures Please\n  Assignment: The Trolley Problem, Part 1\n  Assignment: The Trolley Problem, Part 2\n  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"38d61ddec6f978042a25f7acda9a59ac","permalink":"https://rafed.github.io/courses/ethics-tech-design/f23/week1/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/ethics-tech-design/f23/week1/","section":"courses","summary":"Assignment: Ethical Tech Starts With Addressing Ethical Debt\n  Assignment: Ethics Defined\n  Assignment: The A.I. Dilemma - Full Video\n  Assignment: Zoombombing, Technology Ethics \u0026amp; Awful People Being Awful | An Introduction to Ethical Debt in Tech","tags":null,"title":"Week 1","type":"book"},{"authors":null,"categories":null,"content":"Goal You will learn to build a CI/CD pipeline using git, Github actions and Heroku.\nInstructions Follow the instructions in this Github repo to complete this task.\n","date":1612656e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1612656e3,"objectID":"b458f5506ce7ff9e017ff26cfc2e4d30","permalink":"https://rafed.github.io/courses/distributed-systems/lab/pipeline/","publishdate":"2021-02-07T00:00:00Z","relpermalink":"/courses/distributed-systems/lab/pipeline/","section":"courses","summary":"Goal You will learn to build a CI/CD pipeline using git, Github actions and Heroku.\nInstructions Follow the instructions in this Github repo to complete this task.","tags":null,"title":"Creating a pipeline","type":"book"},{"authors":null,"categories":null,"content":"  ","date":1612656e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1612656e3,"objectID":"d2672b07e28eccaa9a51a8811c3f31e2","permalink":"https://rafed.github.io/courses/distributed-systems/theory/010-intro-microservices/","publishdate":"2021-02-07T00:00:00Z","relpermalink":"/courses/distributed-systems/theory/010-intro-microservices/","section":"courses","summary":"  ","tags":null,"title":"Introduction to Microservices","type":"book"},{"authors":null,"categories":null,"content":"  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"cec6716d9f9232d992b532e48c6a06a6","permalink":"https://rafed.github.io/courses/requirements-engineering/sp24/lecture02/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/requirements-engineering/sp24/lecture02/","section":"courses","summary":"  ","tags":null,"title":"Lecture 2: Intro to RE","type":"book"},{"authors":null,"categories":null,"content":"  Assignment: Deontology\n  Assignment: Moral Relativism\n  Assignment: Superhuman Ethics Class With The Avengers Prime\n  Assignment: Utilitarianism\n  Assignment: Virtue Ethics\n  Assignment: A Designer’s Code of Ethics\n  Assignment: The Technology Facebook and Google Didn’t Dare Release\n  Assignment: Using Persuasive Design Responsibly\n  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"62769f27b8da808220765d9a41ab864e","permalink":"https://rafed.github.io/courses/ethics-tech-design/f23/week2/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/ethics-tech-design/f23/week2/","section":"courses","summary":"Assignment: Deontology\n  Assignment: Moral Relativism\n  Assignment: Superhuman Ethics Class With The Avengers Prime\n  Assignment: Utilitarianism\n  Assignment: Virtue Ethics\n  Assignment: A Designer’s Code of Ethics","tags":null,"title":"Week 2","type":"book"},{"authors":null,"categories":null,"content":"  If we are dealing with a read-heavy system, it\u0026rsquo;s good to consider using a Cache.\n  If we need low latency in the system, it\u0026rsquo;s good to consider using a Cache \u0026amp; CDN.\n  If we are dealing with a write-heavy system, it\u0026rsquo;s good to use a Message Queue for Async processing\n  If we need a system to be ACID complaint, we should go for RDBMS or SQL Database\n  If data is unstructured \u0026amp; doesn\u0026rsquo;t require ACID properties, we should go for NO-SQL Database\n  If the system has complex data in the form of videos, images, files etc, we should go for Blob/Object storage\n  If the system requires complex pre-computation like a news feed, we should use a Message Queue \u0026amp; Cache\n  If the system requires searching data in high volume, we should consider using a search index, tries or a search engine like Elasticsearch\n  If the system requires to Scale SQL Database, we should consider using Database Sharding\n  If the system requires High Availability, Performance, \u0026amp; Throughput, we should consider using a Load Balancer\n  If the system requires faster data delivery globally, reliability, high availability, \u0026amp; performance, we should consider using a CDN\n  If the system has data with nodes, edges, and relationships like friend lists, \u0026amp; road connections, we should consider using a Graph Database\n  If the system needs scaling of various components like servers, databases, etc, we should consider using Horizontal Scaling\n  If the system requires high-performing database queries, we should use Database Indexes\n  If the system requires bulk job processing, we should consider using Batch Processing \u0026amp; Message Queues\n  If the system requires reducing server load and preventing DOS attacks, we should use a Rate Limiter\n  If the system has microservices, we should consider using an API Gateway (Authentication, SSL Termination, Routing etc)\n  If the system has a single point of failure, we should implement Redundancy in that component\n  If the system needs to be fault-tolerant, \u0026amp; durable, we should implement Data Replication (creating multiple copies of data on different servers)\n  If the system needs user-to-user communication (bi-directional) in a fast way, we should use Websockets\n  If the system needs the ability to detect failures in a distributed system, we should implement a Heartbeat\n  If the system needs to ensure data integrity, we should use Checksum Algorithm\n  If the system needs to transfer data between various servers in a decentralized way, we should go for the Gossip Protocol\n  If the system needs to scale servers with add/removal of nodes efficiently, with no hotspots, we should implement Consistent Hashing\n  If the system needs anything to deal with a location like maps, nearby resources, we should consider using Quadtree, Geohash, etc\n  ","date":1688774400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1688774400,"objectID":"31ad0cd85321b9df76cd11018eb46494","permalink":"https://rafed.github.io/courses/distributed-systems/theory/020-sys-design-golden-rules/","publishdate":"2023-07-08T00:00:00Z","relpermalink":"/courses/distributed-systems/theory/020-sys-design-golden-rules/","section":"courses","summary":"If we are dealing with a read-heavy system, it\u0026rsquo;s good to consider using a Cache.\n  If we need low latency in the system, it\u0026rsquo;s good to consider using a Cache \u0026amp; CDN.","tags":null,"title":"System Design Golden Rules","type":"book"},{"authors":null,"categories":null,"content":"Goal Your task is to build a distributed web system following the microservice architecture. It should be implemented following the steps below.\nStep 1: Build a simple server (and a client) You will build a rudimentary version of a Ride sharing app (like Uber/Pathao). The app itself will not be complex as we are here to build a distributed system and not a full-fledged app.\nArchitecture graph TD A[\u0026quot;Client (Bot)\u0026quot;]--\u0026gt;B B[Server]--\u0026gt;C[(Database)]  Requirements Client bot The client bot will spam the server every second with the following two http requests:\n Rider\u0026rsquo;s request contains:  Name Rider\u0026rsquo;s Coordinates (x, y) [Random] Rider\u0026rsquo;s Destination (x, y) [Random]   Driver\u0026rsquo;s request contains:  Name Car number Driver\u0026rsquo;s Coordinates [Random]    Server requirements  /rider endpoint accepts rider requests (http) /driver endpoint accepts driver requests (http) The server will store the information in memory for at least 5 seconds. Design a function that will periodically run on the cached information and make pairs (rider, driver) based on their shortest linear distance. Open a socket.io bidirectional communication medium and send messages through the /communication namespace. Messages from the server will be sent to the client through this channel. Send the ride fare to the client (linear distance * 2 taka) (through socket.io) /rating endpoint receives a random rating after the bot receives a fare  Database  The database only stores driver ratings Storing other information is not necessary (yet) Use mysql or mongodb as your database  Other instructions  You may use any programming language. However, Node.js or Python or Go is recommended Frameworks/libraries can be used. However, it\u0026rsquo;s best not to use full-fledged frameworks. Simpler frameworks (like express/flask/gin) will make things easier Don\u0026rsquo;t implement extra features. Because later, distributing them in multiple instances could turn out to be a problem  Step 2: Service into microservices If you have completed step 1, congratulations! By now you have learned how to-\n make APIs and call them make sockets for bidirectional communication make schedulers that call a function periodically integrate database with an application  If you have done all that, kudos to you! You are now ready to start building microservices (or more like breaking an app into microservices).\nRequirements Let\u0026rsquo;s recap what modules we have in our backend system so far:\n a rider module a driver module a rider/driver matching module a rating module connecting to a database a communication module for bidirectional communication  We\u0026rsquo;ll convert these modules to make three business services.\n Ride sharing service  rider module driver module rider/driver matching module   Communication service Rating service  Our system architecture will be like the following.\nArchitecture graph TD A --- C[\u0026quot;Communication service (socket.io)\u0026quot;] A[\u0026quot;Client (Bot)\u0026quot;]--\u0026gt;B[\u0026quot;Reverse Proxy (Nginx)\u0026quot;] B--\u0026gt;R[Ride sharing service] B--\u0026gt;Ra[Rating service] Ra--\u0026gt;D[(Database)] R--\u0026gt;C  What to do?  In your project folder, make sub projects. Each sub project will be a separate service. Download and configure nginx so that it works as a reverse proxy for all http services (in our case ride sharing service and rating service). For nginx configuration Google is your friend. You can also follow their official docs at docs.nginx.com. Write additional code so that the services communicate among themselves and the business logic discussed in step 1 is served.  Step 3: Containerize and orchestrate If you have completed step 2, congratulations! You have successfully created a distributed system and have a gotten a flavor of how microservices work!\nIn this step we will do three things in our app-\n containerize the services that we made use pre built containers for mysql/mongo and nginx orchestrate our services  Self Learning First, you will need to learn about containerization and orchestration with docker. You can watch the following tutorials-\n Docker in 100 seconds Docker in 7 easy steps Docker-compose tutorial And please, Google some stuff yourself  Once you understand the fundamentals, you can refer to this manual to run the most commonly used docker commands.\nAdditionally, check out this repo for a demo web app that\u0026rsquo;s load balanced, containerized and orchestrated with docker.\nWhat to do?  Write a Dockerfile for each of the following service in their respective sub-project folder  ride sharing service rating servie communication service   Write a docker-compose.yml file in the root project folder to orchestrate all of the services  Other instructions  No change in the application code is necessary (Except maybe port numbers. You may want to reassign them). Windows cannot handle docker containers properly (even though Docker claims that they have support for windows). Use a Linux environment to run docker containers.  Step 4: Geo distribute the app Our ride sharing app is becoming popular! We now want to go global!\nArchitecture graph TD CD[\u0026quot;Client (Dhaka)\u0026quot;] --\u0026gt; ND[\u0026quot;Proxy (Dhaka)\u0026quot;] CC[\u0026quot;Client (Chittagong)\u0026quot;] --\u0026gt; NC[\u0026quot;Proxy (Chittagong)\u0026quot;] CD --\u0026gt; DNS[\u0026quot;DNS\u0026quot;] CC --\u0026gt; DNS ND --\u0026gt; RSSD[\u0026quot;Ride service (Dhaka)\u0026quot;] ND --\u0026gt; RSD[\u0026quot;Rating service (Dhaka)\u0026quot;] RSSD --\u0026gt; CSD[\u0026quot;Communication service (Dhaka)\u0026quot;] CD --- CSD RSD --\u0026gt; DBD[(\u0026quot;DB (Dhaka)\u0026quot;)] NC --\u0026gt; RSSC[\u0026quot;Ride service (Chitt)\u0026quot;] NC --\u0026gt; RSD RSSC --\u0026gt; CSC[\u0026quot;Communication service (Chitt)\u0026quot;] CC --- CSC  Step 5: More development (Bonus) Step 5.1: Use an in memory database Our app has a big problem. The rider and driver list is stored in an array in memory. Imagine what will happen if we wanted to increase availability by creating multiple instances of the \u0026ldquo;Ride sharing service\u0026rdquo;. Can you figure out the problem?\nTo solve this, instead of storing the data in memory, store it inside a redis container. The rider/driver matcher should pull data from the redis cache. (You may need to separate the rider/driver pair matcher to a separate service).\nStep 5.2: Send emails with message queueing We need to do email marketing to our customers to let them know about our latest upgrades and features. Do this by:\n Install a rabbitmq container (rabbitmq is a message queue broker) Make a email service that has  a push to broker function to push addresses to the broker a \u0026ldquo;send email function\u0026rdquo; that periodically sends emails to the addresses stored in the message broker    ","date":1612656e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1612656e3,"objectID":"8d62ecc6f7fb5395b4d54f22f63e873b","permalink":"https://rafed.github.io/courses/distributed-systems/lab/microservice-ride-share/","publishdate":"2021-02-07T00:00:00Z","relpermalink":"/courses/distributed-systems/lab/microservice-ride-share/","section":"courses","summary":"Goal Your task is to build a distributed web system following the microservice architecture. It should be implemented following the steps below.\nStep 1: Build a simple server (and a client) You will build a rudimentary version of a Ride sharing app (like Uber/Pathao).","tags":null,"title":"Ride sharing backend: From monolith to microservices","type":"book"},{"authors":null,"categories":null,"content":"  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"4fc61ced64f64d951d211e3bf27b7b5a","permalink":"https://rafed.github.io/courses/requirements-engineering/sp24/lecture03/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/requirements-engineering/sp24/lecture03/","section":"courses","summary":"  ","tags":null,"title":"Lecture 3: RE Fundamentals","type":"book"},{"authors":null,"categories":null,"content":"  Assignment: How China Is Using A.I. to Profile a Minority\n  Assignment: My Journey Down the Rabbit Hole of Every Journalist’s Favorite App\n  Assignment: Courts and Predictive Algorithms\n  Assignment: Policing the Future**\n  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"62a6c77221765ebf67a2263077f2717a","permalink":"https://rafed.github.io/courses/ethics-tech-design/f23/week3/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/ethics-tech-design/f23/week3/","section":"courses","summary":"Assignment: How China Is Using A.I. to Profile a Minority\n  Assignment: My Journey Down the Rabbit Hole of Every Journalist’s Favorite App\n  Assignment: Courts and Predictive Algorithms","tags":null,"title":"Week 3","type":"book"},{"authors":null,"categories":null,"content":"Goal Your task is to build a monolithic web based system. Then, break down the system into microservices following the microservice architecture. To acheive this follow the steps below.\nStep 1: Build a server and a client You will build a rudimentary version of Facebook. The app itself should not be complex as we are here to build a distributed system and not a full featured social media app.\nArchitecture graph TD CLIENT[Client]--\u0026gt;SERVER[Server] SERVER--\u0026gt;DB[(Database)] SERVER--\u0026gt;OBJ_DB[(Object DB)]  Requirements Client Requirements The client UI will have three routes:\n Registration page Login page News feed page. A news feed will have  A horizontal list of stories at the top (images only) Status from different users (texts only, no comments)    Server requirements APIS  /register endpoint for creating new users  user registers with email and password   /login endpoint for logging (with JWT)  user logs in with email and password   /status endpoint for creating and retrieving status  GET: Get latest 10 statuses of all users except logged in user POST: Create new status for user   /story endpoint for creating and retrieving stories  GET: Get latest 10 stories of all users except logged in user POST: Create new story for user    System assumptions  All users are friends by default The system needs no other services (e.g. messenger, poke, react)  Other instructions  Images uploaded in stories should be stored in an object store database (MinIO) Frameworks/libraries can be used. However, using frameworks (like express/flask/fastapi/gin) will make the assignment easier. Using a framework on the frontend can be useful (angular/vue/react). Don\u0026rsquo;t implement extra features. Because, distributing them in multiple instances could turn out to be a problem later. You may use any programming language. However, Node.js or Python or Go is recommended.  Step 2: Service into microservices If you have completed step 1, congratulations! By now you have learned how to-\n make APIs and call them (from a frontend) integrate database with an application use an object store database  If you have done all that, kudos! You are now ready to start building microservices (or more like breaking an app into microservices).\nRequirements Let\u0026rsquo;s recap what modules we have in our backend system so far:\n a Reg \u0026amp; Auth module a Story module a Status module  Currently these modules serve from a single monolith. We need to segregate them to the following services.\n User service  Registration Login Authentication   Status service Story service  Our system architecture will be like the following.\nArchitecture graph TD CLIENT[\u0026quot;Client\u0026quot;]--\u0026gt;PROXY[\u0026quot;Reverse Proxy (Nginx)\u0026quot;] PROXY--\u0026gt;USER[User service] PROXY--\u0026gt;STATUS[Status service] PROXY--\u0026gt;STORY[Story service] USER--\u0026gt;USER_DB[(User DB)] STATUS--\u0026gt;STATUS_DB[(Status DB)] STATUS--\u0026gt;USER STORY--\u0026gt;STORY_DB[(Story DB)] STORY--\u0026gt;OBJECT_DB[(Object DB)] STORY--\u0026gt;USER  What to do?  In your project folder, make sub projects. Each sub project will be a separate service. Download and configure nginx so that it works as a reverse proxy for all the services For nginx configuration Google is your friend. You can also follow their official docs at docs.nginx.com. Write additional code so that the services communicate among themselves and the business logic discussed in step 1 is served.  You may need to check requests for authorization when a user hits status service and story service   Although it\u0026rsquo;s a best practice to use separate database instances for each service, we will ignore it now for simplicity. Don\u0026rsquo;t worry we\u0026rsquo;ll segregate the database in some later steps.  Step 3: Containerize and orchestrate If you have completed step 2, congratulations! You have successfully created a distributed system and have a got a flavor of how microservices work!\nIn this step we will do three things in our app-\n containerize the services that we made use pre built containers for mysql/mongo and nginx and orchestrate our services  Self Learning First, you will need to learn about containerization and orchestration with docker. You can watch the following tutorials-\n Docker in 100 seconds Docker in 7 easy steps Docker-compose tutorial And please, Google some stuff yourself  Once you understand the fundamentals, you can refer to this manual to run the most commonly used docker commands.\nWhat to do?  Write a Dockerfile for each of the services in their respective directories  User service Status service Story service   Write a docker-compose.yml file in the root project folder to orchestrate all of the services Use separate database (containers) for each service  N.B Follow the reference architecture in step 2\nOther instructions  No change in the application code is necessary (Except for maybe port numbers. You may want to reassign them). Windows cannot handle docker containers properly (even though Docker claims that they have support for windows). Use a Linux environment to run docker containers.  Step 4: Deploy in a swarm Great job guys! By now if you have successfully created a distributed system. However, the current system is distributed in software. What if we want to distribute our services in hardware?\nIn this step we will distribute our services in hardware. We will create a cluster of computers at first (called a swarm). Then we will deploy our containers in it.\nThis step by far should be the easiest (if you have done everything in the previous steps properly).\nSelf Learning Go through the following tutorials at first:\n The official docker swarm docs have a very good getting started tutorial. Go through it. Watch this video www.youtube.com/watch?v=Tm0Q5zr3FL4 And please google some stuff yourself.  What to do?  Create a team of two/three members (max three members per team) Create a docker swarm with two/three PCs Deploy each member\u0026rsquo;s facebook app in the swarm  Important commands when creating a swarm $ docker create swarm $ docker join swarm --token SWMTKN-1-26hm.....jxjxnj 192.168.x.xxx:2377 $ docker swarm leave --force $ docker node ls $ docker info # check current swarm status $ docker stack deploy --compose-file docker-compose.yml bsse07xx $ docker stack services bsse07xx  ","date":1660953600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1660953600,"objectID":"6c0cbe0c077177e5781e4b3319d238b7","permalink":"https://rafed.github.io/courses/distributed-systems/lab/microservice-facebook/","publishdate":"2022-08-20T00:00:00Z","relpermalink":"/courses/distributed-systems/lab/microservice-facebook/","section":"courses","summary":"Goal Your task is to build a monolithic web based system. Then, break down the system into microservices following the microservice architecture. To acheive this follow the steps below.\nStep 1: Build a server and a client You will build a rudimentary version of Facebook.","tags":null,"title":"Facebook backend: From monolith to microservices","type":"book"},{"authors":null,"categories":null,"content":"  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"cc87de2f1994a898cbe203a7e262dc11","permalink":"https://rafed.github.io/courses/requirements-engineering/sp24/lecture04/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/requirements-engineering/sp24/lecture04/","section":"courses","summary":"  ","tags":null,"title":"Lecture 4: Product Vision","type":"book"},{"authors":null,"categories":null,"content":"  Assignment: Big Data and Its Exclusions\n  Assignment: Big Data in 5 Minutes\n  Assignment: Gender Shades\n  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"f0c051d2409030f518c1bb4ac0d7fee0","permalink":"https://rafed.github.io/courses/ethics-tech-design/f23/week4/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/ethics-tech-design/f23/week4/","section":"courses","summary":"  Assignment: Big Data and Its Exclusions\n  Assignment: Big Data in 5 Minutes\n  Assignment: Gender Shades\n  ","tags":null,"title":"Week 4","type":"book"},{"authors":null,"categories":null,"content":"Goal Your task is to build a monolithic web based system. Then, break down the system into microservices following the microservice architecture. To acheive this follow the steps below.\nStep 1: Build a server and a client You will create a basic version of LinkedIn. The app itself should not be complex as we are here to build a distributed system and not a full featured social media app.\nArchitecture graph TD CLIENT[Client]--\u0026gt;SERVER[Server] SERVER--\u0026gt;DB[(Database)] SERVER--\u0026gt;OBJ_DB[(Object DB)]  Requirements Client Requirements The client UI will have the following routes:\n Registration page Login page Home page: should show a vertical list of posts (texts/images) Notification page: should show notifications of recent posts  Clicking on the notification should show the post    Server requirements APIS  /register endpoint for creating new users  user registers with email and password   /login endpoint for logging (with JWT)  user logs in with email and password   /post endpoint for creating and retrieving posts  GET: Get latest posts of all users except logged in user POST: Create new posts for user   /notification endpoint for creating and retrieving notifications  GET: Get notifications POST: Create notification against a post    Jobs  Notification cleaner: A job should periodically check for old notifications and delete them  System assumptions  All users are friends/connected by default The system needs no other services (e.g. chat, comments, reacts)  Other instructions  Images uploaded for posts should be stored in an object store database (MinIO) You may use any programming language. However, Node.js or Python or Go is recommended. Frameworks/libraries can be used. However, using frameworks (like express/flask/fastapi/gin) will make the assignment easier. Using a framework on the frontend can be useful (angular/vue/react). You can use any database. Mongo recommended. Don\u0026rsquo;t implement extra features. Because, distributing them in multiple instances could turn out to be a problem later.  Step 2: Decompose to microservices, containerize and orchestrate If you have completed step 1, congratulations! By now you have learned how to-\n make APIs and call them (from a frontend) integrate database with an application use an object store database  If you have done all that, kudos! You are now ready to start building microservices (or more like breaking an app into microservices).\nRequirements Currently our application is a monolith. It\u0026rsquo;s time we convert it to a microservice applitcation.\nLet\u0026rsquo;s recap what modules we have in our backend system so far:\n User management module (Registration, Login) Posts module Notification module  Currently these modules form a single monolith. We need to segregate them to the following services.\n User service  Registration Login Authentication   Posts service Notification service  In addition, we also need to develop a sustainable system/environment where we can build/run the microservices easily.\nOur expected system architecture will be like the following.\nArchitecture graph TD CLIENT[\u0026quot;Client\u0026quot;]--\u0026gt;PROXY[\u0026quot;Reverse Proxy (Nginx)\u0026quot;] PROXY--\u0026gt;USER[User service] PROXY--\u0026gt;POST[Post service] PROXY--\u0026gt;NOTIFICATION[Notification service] USER--\u0026gt;USER_DB[(User DB)] POST--\u0026gt;POST_DB[(Post DB)] POST--\u0026gt;OBJECT_DB[(Object DB)] POST--\u0026gt;USER NOTIFICATION--\u0026gt;NOTIFICATION_DB[(Notif DB)] NOTIFICATION--\u0026gt;USER  What to do?  In your project folder, make sub projects. Each sub project will be a separate microservice. Decompose the monolith into microservices so that each microservice is in a sub-project. Containerize each service using Docker Orchestrate the services by writing a docker-compose file Make sure to have an nginx container so that ALL traffic is routed through nginx and delivered to the respective services Write additional code so that the services communicate among themselves and the business logic discussed in step 1 is served.  You may need to check requests for authorization when a user hits post service and notification service    Suggestions/Learning Materials  Take your time to do the assignment. Instead of seeing it as one large task, try completing it taking one step at a time. For writing nginx configurations Google is your friend. You can also follow their official docs at docs.nginx.com. Easy tutorials on containerizing with Docker  Docker in 100 seconds Docker in 7 easy steps Docker-compose tutorial My personal docker cheatsheet And please, Google some stuff yourself   For inspiration, you can check out this repo for a demo web app that\u0026rsquo;s load balanced, containerized and orchestrated with docker.  Good Luck!\n","date":1688774400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1688774400,"objectID":"91fadf6eb3f55338492b6a6b7aad1aa8","permalink":"https://rafed.github.io/courses/distributed-systems/lab/microservice-linkedin/","publishdate":"2023-07-08T00:00:00Z","relpermalink":"/courses/distributed-systems/lab/microservice-linkedin/","section":"courses","summary":"Goal Your task is to build a monolithic web based system. Then, break down the system into microservices following the microservice architecture. To acheive this follow the steps below.\nStep 1: Build a server and a client You will create a basic version of LinkedIn.","tags":null,"title":"LinkedIn backend: From monolith to microservices","type":"book"},{"authors":null,"categories":null,"content":"  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"feccad22a94688939397a79ad79d43e5","permalink":"https://rafed.github.io/courses/requirements-engineering/sp24/lecture05/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/requirements-engineering/sp24/lecture05/","section":"courses","summary":"  ","tags":null,"title":"Lecture 5: Stakeholders + Elicitation - part 1","type":"book"},{"authors":null,"categories":null,"content":"  Assignment: Ethics Unwrapped: Implicit Bias\n  Assignment: Ethics, Geography, and Mapping\n  Assignment: Mapping Justice As Transportation\n  Assignment: A Data Designer’s Responsibility During a Global Crisis\n  Assignment: The Future of Free Speech, Trolls, Anonymity and Fake News Online\n  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"53833620335183064b0d05d9e1fefe38","permalink":"https://rafed.github.io/courses/ethics-tech-design/f23/week5/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/ethics-tech-design/f23/week5/","section":"courses","summary":"Assignment: Ethics Unwrapped: Implicit Bias\n  Assignment: Ethics, Geography, and Mapping\n  Assignment: Mapping Justice As Transportation\n  Assignment: A Data Designer’s Responsibility During a Global Crisis","tags":null,"title":"Week 5","type":"book"},{"authors":null,"categories":null,"content":"  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"0a84ea2e2413e4d28d8eab056e2c02ce","permalink":"https://rafed.github.io/courses/requirements-engineering/sp24/lecture06/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/requirements-engineering/sp24/lecture06/","section":"courses","summary":"  ","tags":null,"title":"Lecture 6: Elicitation - part 2","type":"book"},{"authors":null,"categories":null,"content":"  Assignment: How Dating Apps Became a Paradise for Predators\n  Assignment: How Hinge\u0026rsquo;s Algorithm Picks Your Dates\n  Assignment: Encode Justice\n  Assignment: Meta’s Censorship of Health Ads for Women and People of Diverse Genders\n  Assignment: Young People Lobby Congress for More Online Protections\n  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"c82f686b790b9ffa75a219a5f472f3e1","permalink":"https://rafed.github.io/courses/ethics-tech-design/f23/week6/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/ethics-tech-design/f23/week6/","section":"courses","summary":"Assignment: How Dating Apps Became a Paradise for Predators\n  Assignment: How Hinge\u0026rsquo;s Algorithm Picks Your Dates\n  Assignment: Encode Justice\n  Assignment: Meta’s Censorship of Health Ads for Women and People of Diverse Genders","tags":null,"title":"Week 6","type":"book"},{"authors":null,"categories":null,"content":"  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"9c6287f95fbd7e4c6b15607d452b1e9e","permalink":"https://rafed.github.io/courses/requirements-engineering/sp24/lecture07/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/requirements-engineering/sp24/lecture07/","section":"courses","summary":"  ","tags":null,"title":"Lecture 7: Documenting Requirements","type":"book"},{"authors":null,"categories":null,"content":"  Assignment: Building Consentful Tech\n  Assignment: In Our Own Words\n  Assignment: Something is Wrong on the Internet\n  Assignment: The Touchpoint Collective\n  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"ad1155984c2bb27aab4ba03cd08bcd2d","permalink":"https://rafed.github.io/courses/ethics-tech-design/f23/week7/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/ethics-tech-design/f23/week7/","section":"courses","summary":"  Assignment: Building Consentful Tech\n  Assignment: In Our Own Words\n  Assignment: Something is Wrong on the Internet\n  Assignment: The Touchpoint Collective\n  ","tags":null,"title":"Week 7","type":"book"},{"authors":null,"categories":null,"content":"  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"cff8acdd4a6adcbb3649e21b51ca462d","permalink":"https://rafed.github.io/courses/requirements-engineering/sp24/lecture08/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/requirements-engineering/sp24/lecture08/","section":"courses","summary":"  ","tags":null,"title":"Lecture 8: Specifying with Natural Language","type":"book"},{"authors":null,"categories":null,"content":" Assignment: #Gamergate and The Fappening: How Reddit’s Algorithm, Governance, and Culture Support Toxic Technocultures Assignment: The Secret Rules of the Internet: The Murky History of Moderation and How It Is Shaping the Future of Free Speech Assignment: Thoughts and Prayers: A Short Story About Trolling  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"1848239c40f4b1b74dc3b35f45c55e92","permalink":"https://rafed.github.io/courses/ethics-tech-design/f23/week8/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/ethics-tech-design/f23/week8/","section":"courses","summary":" Assignment: #Gamergate and The Fappening: How Reddit’s Algorithm, Governance, and Culture Support Toxic Technocultures Assignment: The Secret Rules of the Internet: The Murky History of Moderation and How It Is Shaping the Future of Free Speech Assignment: Thoughts and Prayers: A Short Story About Trolling  ","tags":null,"title":"Week 8","type":"book"},{"authors":null,"categories":null,"content":"  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"f3f6506c233ec6d8221b815e8a3cf172","permalink":"https://rafed.github.io/courses/requirements-engineering/sp24/lecture09/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/requirements-engineering/sp24/lecture09/","section":"courses","summary":"  ","tags":null,"title":"Lecture 9: RE Processes","type":"book"},{"authors":null,"categories":null,"content":"  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"433286c0d972fdb7682084c6e8ad28ee","permalink":"https://rafed.github.io/courses/requirements-engineering/sp24/lecture10/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/requirements-engineering/sp24/lecture10/","section":"courses","summary":"  ","tags":null,"title":"Lecture 10: Use Cases","type":"book"},{"authors":null,"categories":null,"content":"  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"f9c5cdca00b505424733d918167cb7dc","permalink":"https://rafed.github.io/courses/requirements-engineering/sp24/lecture11/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/requirements-engineering/sp24/lecture11/","section":"courses","summary":"  ","tags":null,"title":"Lecture 11: Management and Traceability","type":"book"},{"authors":null,"categories":null,"content":"  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"2fb9f473f4c3c687301fedf4e489eca3","permalink":"https://rafed.github.io/courses/requirements-engineering/sp24/lecture12/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/requirements-engineering/sp24/lecture12/","section":"courses","summary":"  ","tags":null,"title":"Lecture 12: RE for AI","type":"book"},{"authors":null,"categories":null,"content":"  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"cd9fe4e7f35f7a72d2c6d36c8ca8116a","permalink":"https://rafed.github.io/courses/requirements-engineering/sp24/lecture13/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/requirements-engineering/sp24/lecture13/","section":"courses","summary":"  ","tags":null,"title":"Lecture 13: RE Guidance","type":"book"},{"authors":null,"categories":null,"content":"  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"60489106995ae316ea4e9bd11a2a1885","permalink":"https://rafed.github.io/courses/requirements-engineering/sp24/lecture14/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/requirements-engineering/sp24/lecture14/","section":"courses","summary":"  ","tags":null,"title":"Lecture 14: Validation","type":"book"},{"authors":null,"categories":null,"content":"  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"f502be41d1947bfdaaaa9e684f965290","permalink":"https://rafed.github.io/courses/requirements-engineering/sp24/lecture15/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/requirements-engineering/sp24/lecture15/","section":"courses","summary":"  ","tags":null,"title":"Lecture 15: Agile RE","type":"book"},{"authors":null,"categories":null,"content":"  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"05d6344059a6e49dd685c17001d68c1b","permalink":"https://rafed.github.io/courses/requirements-engineering/sp24/lecture16/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/requirements-engineering/sp24/lecture16/","section":"courses","summary":"  ","tags":null,"title":"Lecture 16: Conclusion","type":"book"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways: - **Create** slides using Wowchemy's [*Slides*](https://wowchemy.com/docs/managing-content/#create-slides) feature and link using `slides` parameter in the front matter of the talk file - **Upload** an existing slide deck to `static/` and link using `url_slides` parameter in the front matter of the talk file - **Embed** your slides (e.g. Google Slides) or presentation video on this page using [shortcodes](https://wowchemy.com/docs/writing-markdown-latex/). Further event details, including [page elements](https://wowchemy.com/docs/writing-markdown-latex/) such as image galleries, can be added to the body of this page. -- ","date":1682593200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1682593200,"objectID":"9b8bbcb04f69c9cf89908315419733c9","permalink":"https://rafed.github.io/event/2023-code-in-place/","publishdate":"2022-10-29T00:00:00Z","relpermalink":"/event/2023-code-in-place/","section":"event","summary":"Taught the foundational concepts of Python","tags":[],"title":"Code in Place: A free, human-centered, intro-to-coding course from Stanford University","type":"event"},{"authors":[],"categories":null,"content":"   Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways: - **Create** slides using Wowchemy's [*Slides*](https://wowchemy.com/docs/managing-content/#create-slides) feature and link using `slides` parameter in the front matter of the talk file - **Upload** an existing slide deck to `static/` and link using `url_slides` parameter in the front matter of the talk file - **Embed** your slides (e.g. Google Slides) or presentation video on this page using [shortcodes](https://wowchemy.com/docs/writing-markdown-latex/). Further event details, including [page elements](https://wowchemy.com/docs/writing-markdown-latex/) such as image galleries, can be added to the body of this page. --      ","date":1670342400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1670342400,"objectID":"a98d2340908e1f422c6186b9bd222390","permalink":"https://rafed.github.io/event/2022-quasoq/","publishdate":"2022-12-07T00:00:00Z","relpermalink":"/event/2022-quasoq/","section":"event","summary":"Presented my paper on code style and was a dicussant","tags":[],"title":"10th International Workshop on Quantitative Approaches to Software Quality (QuASoQ)","type":"event"},{"authors":[],"categories":null,"content":"   Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways: - **Create** slides using Wowchemy's [*Slides*](https://wowchemy.com/docs/managing-content/#create-slides) feature and link using `slides` parameter in the front matter of the talk file - **Upload** an existing slide deck to `static/` and link using `url_slides` parameter in the front matter of the talk file - **Embed** your slides (e.g. Google Slides) or presentation video on this page using [shortcodes](https://wowchemy.com/docs/writing-markdown-latex/). Further event details, including [page elements](https://wowchemy.com/docs/writing-markdown-latex/) such as image galleries, can be added to the body of this page. -- ","date":1667127600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1667127600,"objectID":"42b2d4aa7e4428c60e9351b33a802888","permalink":"https://rafed.github.io/event/2022-software-maintenance/","publishdate":"2022-10-29T00:00:00Z","relpermalink":"/event/2022-software-maintenance/","section":"event","summary":"Conducted a session on software maintenance for 4th year students","tags":[],"title":"Software Maintenance: A DevOps Practitioners Perspective","type":"event"},{"authors":["Rafed Muhammad Yasir","Dr. Ahmedul Kabir"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.   --  Create your slides in Markdown - click the Slides button to check out the example.   -- ","date":1664928e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1664928e3,"objectID":"c9de7cff894b36a3cfee5ecb650d8b5b","permalink":"https://rafed.github.io/publication/03-code-style/","publishdate":"2022-10-05T00:00:00Z","relpermalink":"/publication/03-code-style/","section":"publication","summary":"Code style is an aesthetic choice exhibited in source code that reflects programmers individual coding habits. This study is the first to investigate whether code style can be used as an indicator to identify good programmers. Data from Google Code Jam was chosen for conducting the study. A cluster analysis was performed to find whether a particular coding style could be associated with good programmers. Furthermore, supervised machine learning models were trained using stylistic features and evaluated using recall, macro-F1, AUC-ROC and balanced accuracy to predict good programmers. The results demonstrate that good programmers may be identified using supervised machine learning models, despite that no particular style groups could be attributed as a good style.","tags":null,"title":"Exploring the Impact of Code Style in Identifying Good Programmers","type":"publication"},{"authors":null,"categories":null,"content":"In 2022, knowing how to handle data is as important as kowing how to handle applications in the cloud. This is my first certification that proves that I know the fundamentals of data management. Looking forward to the future when I can become an expert at data management.\n","date":1663632e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1663632e3,"objectID":"c8b608a74d8fd35533f1348e8cce0f1b","permalink":"https://rafed.github.io/achievement/certifications/azure-data-fundamentals/","publishdate":"2022-09-20T00:00:00Z","relpermalink":"/achievement/certifications/azure-data-fundamentals/","section":"achievement","summary":"Azure Data Fundamentals: My entry to the Data world","tags":["Certifications"],"title":"Microsoft Certified: Azure Data Fundamentals","type":"achievement"},{"authors":null,"categories":null,"content":"Clinician is a healthcare platform that effectively utilizes DevOps practices to streamline its software development and deployment processes. By adopting DevOps principles, Clinician enhances collaboration between teams, automates tasks, and ensures the delivery of reliable and secure software solutions for patient care.\nDevOps enables Clinician to automate the software development lifecycle, including continuous integration and delivery. This approach allows for the rapid merging of code changes, early bug detection, and minimized conflicts, resulting in faster and more efficient software updates and releases. Furthermore, Clinician leverages infrastructure as code, ensuring consistency and reproducibility across different environments, which reduces configuration errors and enhances system stability.\nIn addition, Clinician emphasizes monitoring and logging, enabling valuable insights into system performance and user behavior. These insights help identify potential issues, measure the impact of changes, and drive continuous improvement. By embracing DevOps practices, Clinician delivers reliable and secure software solutions that cater to the evolving needs of the healthcare industry, ultimately improving patient care and operational efficiency while ensuring customer satisfaction.\n","date":1661990400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1661990400,"objectID":"fecbeeff875193c6f2b6e3b430905561","permalink":"https://rafed.github.io/project/theclinician/","publishdate":"2022-09-01T00:00:00Z","relpermalink":"/project/theclinician/","section":"project","summary":"A New Zealand based digital healthcare platform.","tags":["real"],"title":"The Clinician","type":"project"},{"authors":null,"categories":null,"content":"I am very proud of this certificate as it is my first ever certification. Although I\u0026rsquo;m more experienced in AWS, I still decided to try my shot at azure. With a few days of learning I\u0026rsquo;m happy that I could achieve it. I hope this certification paves the way for me to learn and do more in the cloud realm.\n","date":1646784e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1646784e3,"objectID":"31c9af45d062f7bad0a5f1d7b4dc1e72","permalink":"https://rafed.github.io/achievement/certifications/azure-fundamentals/","publishdate":"2022-03-09T00:00:00Z","relpermalink":"/achievement/certifications/azure-fundamentals/","section":"achievement","summary":"Azure Fundamentals: My first ever cloud certification","tags":["Certifications"],"title":"Microsoft Certified: Azure Fundamentals","type":"achievement"},{"authors":["Moumita Asad","Rafed Muhammad Yasir","Shihab Shahriar","Nadia Nahar","Md. Nurul Ahad Tawhid"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.   --  Create your slides in Markdown - click the Slides button to check out the example.   -- ","date":1618963200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1618963200,"objectID":"06495eda17c7b2c87609d8cd17110d4d","permalink":"https://rafed.github.io/publication/06-comprego/","publishdate":"2021-04-21T00:00:00Z","relpermalink":"/publication/06-comprego/","section":"publication","summary":"Program comprehension is one of the most important activities in developing and maintaining software. Although existing studies have examined aspects of Go such as design patterns, code smells and comment density, the comprehensibility of Go has not been explored yet. This study analyzes the comprehensibility of Go by comparing it with Java based on five metrics namely Too Long Files, Too Long Methods, Nesting Depth, Lack of Cohesive Comments and Duplicate Comments. For comparison, 50 popular, diverse and open-source projects are selected from each language. Results show that Go projects outperform Java in terms of Nesting Depth, Lack of Cohesive Comments and Duplicate Comments.","tags":null,"title":"Analyzing Program Comprehensibility of Go Projects","type":"publication"},{"authors":null,"categories":null,"content":"TEQ is a bus management admin panel developed and maintained by Brainstation-23 for Ferdia, Norway. I worked in this project as a backend and devops engineer. My responsibilities included operating Kubernetes cluster, managing AWS resources and creating CI/CD pipelines.\nMy responsibilities include:\n Work as a backend engineer (Python, Django) DevOps Engineer:  Operate kubernetes cluster Manage AWS resources Create pipelines    ","date":1614556800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1614556800,"objectID":"ec2a6326a64a0a59c1c270659c65efff","permalink":"https://rafed.github.io/project/teq/","publishdate":"2021-03-01T00:00:00Z","relpermalink":"/project/teq/","section":"project","summary":"A Norwegian Bus/Transport Management App","tags":["real"],"title":"TEQ","type":"project"},{"authors":null,"categories":null,"content":"BlogRa is a tech blogging theme for Hugo. I did not find the existing themes for Hugo suitable for my blogging experience. So I made this for myself.\nCheck it out. A star on the repo would be much appreciated.\n","date":1613088e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1613088e3,"objectID":"04104922d766daaf4cef9d8cd8a1c4f7","permalink":"https://rafed.github.io/project/blogra/","publishdate":"2021-02-12T00:00:00Z","relpermalink":"/project/blogra/","section":"project","summary":"A tech blogging theme for Hugo","tags":["hugo","pet"],"title":"BlogRa","type":"project"},{"authors":[],"categories":null,"content":"   Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways: - **Create** slides using Wowchemy's [*Slides*](https://wowchemy.com/docs/managing-content/#create-slides) feature and link using `slides` parameter in the front matter of the talk file - **Upload** an existing slide deck to `static/` and link using `url_slides` parameter in the front matter of the talk file - **Embed** your slides (e.g. Google Slides) or presentation video on this page using [shortcodes](https://wowchemy.com/docs/writing-markdown-latex/). Further event details, including [page elements](https://wowchemy.com/docs/writing-markdown-latex/) such as image galleries, can be added to the body of this page. -- ","date":1612692e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1612692e3,"objectID":"633544ef72a2568c841d8162368d7fbb","permalink":"https://rafed.github.io/event/2021-hands-on-containerization/","publishdate":"2021-02-07T00:00:00Z","relpermalink":"/event/2021-hands-on-containerization/","section":"event","summary":"Conducted a session on Docker fundamentals","tags":[],"title":"Hands on Containerization with Docker","type":"event"},{"authors":["Dr. Ishtiaque Hussain","Ahmed Shamim Hasan","Rafed Muhammad Yasir","Dr. Ahmedul Kabir","Syed Ishtiaque Ahmed"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including [code, math, and images](https://wowchemy.com/docs/writing-markdown-latex/). -- ","date":1607126400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607126400,"objectID":"3dd09a9bc607a4cd0e422f59dd1fd4b2","permalink":"https://rafed.github.io/publication/04-how-well-does-undergraduate-education/","publishdate":"2020-12-05T00:00:00Z","relpermalink":"/publication/04-how-well-does-undergraduate-education/","section":"publication","summary":"While the sole purpose of undergraduate education is not to prepare the students for the industry, it is certainly one of its important objectives. In this work, we investigate how well the Bangladeshi software and IT-related undergraduate education prepares the students for the software industry. We conducted semi-structured interviews of twenty practitioners from the Bangladeshi software industry. During the interviews, these practitioners provided commentary on where they believe the undergraduate education system falls short, and provided their suggestions for improvement. Based on the themes discovered from the interviews, we created a survey where more than two hundred practitioners participated. The results of our work suggest that most of the practitioners believe that, while some aspects of the undergraduate education are fine, the undergraduate education system leaves its graduates largely unprepared for the software industry. In this paper, we summarize and present the practitioners' opinions on some key areas including but not limited to updating of syllabi, internships as part of the curricula, the nature, length and evaluation process of undergraduate projects, pedagogical issues, and academic practices.","tags":null,"title":"How Well Does Undergraduate Education Prepare Software Engineers? Perspectives of Practitioners in Bangladesh","type":"publication"},{"authors":null,"categories":null,"content":"After discovering Hugo (a static blog generator), I decided to make a theme for myself and Ramium was the result.\nNot really the best theme out there, but hey, it was a nice learning experience.\nI have made a better theme now called BlogRa, which I use for my personal tech blog. Check it out at github.com/rafed/BlogRa\n","date":1588464e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588464e3,"objectID":"91b98d8c1d6f5c8b0f60d6d26dd96f40","permalink":"https://rafed.github.io/project/ramium/","publishdate":"2020-05-03T00:00:00Z","relpermalink":"/project/ramium/","section":"project","summary":"My first blogging theme for Hugo","tags":["hugo","pet"],"title":"Ramium","type":"project"},{"authors":[],"categories":null,"content":"  --  Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways: - **Create** slides using Wowchemy's [*Slides*](https://wowchemy.com/docs/managing-content/#create-slides) feature and link using `slides` parameter in the front matter of the talk file - **Upload** an existing slide deck to `static/` and link using `url_slides` parameter in the front matter of the talk file - **Embed** your slides (e.g. Google Slides) or presentation video on this page using [shortcodes](https://wowchemy.com/docs/writing-markdown-latex/). Further event details, including [page elements](https://wowchemy.com/docs/writing-markdown-latex/) such as image galleries, can be added to the body of this page. --    ","date":156483e4,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":156483e4,"objectID":"48bca67e8994cf0596d42601f6533113","permalink":"https://rafed.github.io/event/2019-training-workshop-on-devops/","publishdate":"2019-08-05T00:00:00Z","relpermalink":"/event/2019-training-workshop-on-devops/","section":"event","summary":"Training Workshop on DevOps 2019","tags":[],"title":"Training Workshop on DevOps 2019","type":"event"},{"authors":[],"categories":null,"content":"   Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways: - **Create** slides using Wowchemy's [*Slides*](https://wowchemy.com/docs/managing-content/#create-slides) feature and link using `slides` parameter in the front matter of the talk file - **Upload** an existing slide deck to `static/` and link using `url_slides` parameter in the front matter of the talk file - **Embed** your slides (e.g. Google Slides) or presentation video on this page using [shortcodes](https://wowchemy.com/docs/writing-markdown-latex/). Further event details, including [page elements](https://wowchemy.com/docs/writing-markdown-latex/) such as image galleries, can be added to the body of this page. -- ","date":1553857200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1553857200,"objectID":"80689c89f792673dc3a9865ea3ffd0f6","permalink":"https://rafed.github.io/event/2019-introduction-to-hacking/","publishdate":"2019-03-29T00:00:00Z","relpermalink":"/event/2019-introduction-to-hacking/","section":"event","summary":"Live hacking demo for high school students","tags":[],"title":"Introduction to Hacking","type":"event"},{"authors":["Rafed Muhammad Yasir","Moumita Asad","Asadullah Hill Galib","Kishan Kumar Ganguly","Md Saeed Siddik"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.   --  Create your slides in Markdown - click the Slides button to check out the example.   -- ","date":1551744e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1551744e3,"objectID":"72aa02ec92744bfe6fb02d2ec07b2cd0","permalink":"https://rafed.github.io/publication/02-godexpo/","publishdate":"2019-03-05T00:00:00Z","relpermalink":"/publication/02-godexpo/","section":"publication","summary":"God Class is a class that threatens maintainability and understandability of code by performing most of the work alone. Various tools exist that can detect God Class of Java or C++ programs, however, there is no existing tool for detecting God Class(Structure) in Golang. Although Golang is not an object-oriented language, it offers structures which are similar to classes in OOP as they can contain fields and methods. Unlike OOP, methods of a structure can be defined on any file in the package of Golang. This paper presents a tool entitled GodExpo to detect God Structures in Golang programs by calculating metrics namely Weighted Method Count, Tight Class Cohesion, and Access to Foreign Data. In addition, GodExpo can provide version wise results to observe the evolution of God structures. To evaluate GodExpo, an experiment has been conducted on several versions of two open source Golang projects and the tool successfully found God structures in all versions of those projects.","tags":null,"title":"GodExpo: an automated god structure detection tool for Golang","type":"publication"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)   Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  **Two**  Three   A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/media/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}   Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }   Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://rafed.github.io/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":null,"categories":null,"content":"Virtual Trial Room is one of my most successful projects. It is a browser based trial room for wearing clothes virtually.\n   This project won several awards-\n Champions, NSU Technovation Hackathon 2018, North South University Joint Runners Up, NSU Cybernauts, North South University Computer \u0026amp; Engineering Club (NSU CEC) Second Runners Up, Technival 2018, Khulna University of Engineering and Technology (KUET) Second Runners Up, Inter University Project Show, CSE Fest, Bangladesh University of Engineering and Technology (BUET)     This project also got featured on BBC Click.\n   My talented friends who contributed to this project are:\n Moumita Asad Aquib Azmain  Technology used:\n Python Flask OpenCV  ","date":1543968e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1543968e3,"objectID":"3d44c1c7b9357450d1131e63eb453d6b","permalink":"https://rafed.github.io/project/virtual-trial-room/","publishdate":"2018-12-05T00:00:00Z","relpermalink":"/project/virtual-trial-room/","section":"project","summary":"A browser based trial room for wearing clothes virtually","tags":["Python","ML","competition"],"title":"Virtual Trial Room","type":"project"},{"authors":null,"categories":null,"content":"Salimullah Hall Management System is a web application to digitize the activities of Salimullah Hall, University of Dhaka. Our entire university batch contributed in developing this app in our final semester. Through the app the following activities can be done:\n Student management Employee management Inventory management Accounting Residence management User management  Technology used:\n Python Flask Angular MariaDB  ","date":1543276800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1543276800,"objectID":"9c1612d20fad9bec87702511fa5818b3","permalink":"https://rafed.github.io/project/sm-hall-management/","publishdate":"2018-11-27T00:00:00Z","relpermalink":"/project/sm-hall-management/","section":"project","summary":"Web based app for managing students, inventories, employees and others.","tags":["Python","academic","real"],"title":"Salimullah Hall Management System","type":"project"},{"authors":null,"categories":null,"content":"canF is a vulnerability assessment tool aimed at assisting penetration testers to easily carry out XSS and SQLi attacks for discovering vulnerabilities.\nTechnology used:\n Python Flask Selenium Vue  ","date":1543276800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1543276800,"objectID":"12c7bfa22d8e59fb1c5a85c94c0c4908","permalink":"https://rafed.github.io/project/scanf/","publishdate":"2018-11-27T00:00:00Z","relpermalink":"/project/scanf/","section":"project","summary":"Web based tool for SQLi and XSS","tags":["academic"],"title":"ScanF - A web application security assessment tool","type":"project"},{"authors":null,"categories":null,"content":"Showme is a tool that shows research related work of a paper by showing its citation graph. It was made for the SCORE competition in ICSE 2018 and it made to the final six. Other awesome members who also contributed to the project:\n Kishan Kumar Ganguly Moumita Asad Aquib Azmain  Technology used:\n Python Flask Angular  ","date":1536969600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1536969600,"objectID":"f0c81714540ca4b4edfb937c62dd333f","permalink":"https://rafed.github.io/project/showme/","publishdate":"2018-09-15T00:00:00Z","relpermalink":"/project/showme/","section":"project","summary":"Citation graph tool for research papers","tags":["ICSE","competition"],"title":"Showme - ICSE SCORE","type":"project"},{"authors":null,"categories":null,"content":"BUET CSE fest was yet another win for our virtual trial room project. Being able to take away a prize from the strong contenders of BUET is really an achievement to remember.\nProject: Virtual Trial Room\nTeam members:\n Rafed Muhammad Yasir Aquib Azmain Moumita Asad     ","date":1525910400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1525910400,"objectID":"e77b19a6cbfa2fc9ccc93574e7162733","permalink":"https://rafed.github.io/achievement/awards/04-buet-cse-fest/","publishdate":"2018-05-10T00:00:00Z","relpermalink":"/achievement/awards/04-buet-cse-fest/","section":"achievement","summary":"CSE fest, Bangladesh University of Engineering \u0026 Technology (BUET)","tags":["Awards"],"title":"Second runners up, Inter university project show","type":"achievement"},{"authors":null,"categories":null,"content":"KUET technival was the biggest compeition we faced so far in terms of number of participants. It was a hard competition and we managed a 2nd runners up.\nProject: Virtual Trial Room\nTeam members:\n Rafed Muhammad Yasir Moumita Asad Aquib Azmain     ","date":1524268800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1524268800,"objectID":"917cda54d892a4f710b06e18b5e89c20","permalink":"https://rafed.github.io/achievement/awards/03-kuet-technival/","publishdate":"2018-04-21T00:00:00Z","relpermalink":"/achievement/awards/03-kuet-technival/","section":"achievement","summary":"Technival 2018, Khulna University of Engineering \u0026 Technology (KUET)","tags":["Awards"],"title":"Second Runners Up, Project Showcasing","type":"achievement"},{"authors":null,"categories":null,"content":"Another achievement from NSU! A bit unlucky we even had to share the position of runners up. Apart from that it was an event to enjoy!\nAlso got lucky to give my first tv interview ever and that too on BBC click!\nProject: Virtual Trial Room\nTeam members:\n Rafed Muhammad Yasir Moumita Asad Aquib Azmain     ","date":1521676800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1521676800,"objectID":"2450e2fe9a1b6234304e14c6105e75b5","permalink":"https://rafed.github.io/achievement/awards/02-nsu-cybernauts/","publishdate":"2018-03-22T00:00:00Z","relpermalink":"/achievement/awards/02-nsu-cybernauts/","section":"achievement","summary":"NSU Cybernauts, North South University Computer and Engineering Club (NSU CEC)","tags":["Awards"],"title":"Joint Runners Up, Senior Project Showcasing","type":"achievement"},{"authors":null,"categories":null,"content":"Our first ever hackathon and our first ever victory being champions. It was a moment to remember at NSU.\nProject: Virtual Trial Room\nTeam members:\n Rafed Muhammad Yasir Moumita Asad Shuvo Saha Fazle Rabbi     ","date":1519430400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1519430400,"objectID":"af6790eefed2c7f51bbe74039f255f12","permalink":"https://rafed.github.io/achievement/awards/01-nsu-technovation/","publishdate":"2018-02-24T00:00:00Z","relpermalink":"/achievement/awards/01-nsu-technovation/","section":"achievement","summary":"NSU Technovation Hackathon 2018, North South University (NSU)","tags":["Awards"],"title":"Champions, Hackathon","type":"achievement"},{"authors":null,"categories":null,"content":"8-puzzle solver using A* search algorithm, implemented in Java. This was a class assignment.\n","date":1501891200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1501891200,"objectID":"583d488c802cb0ec73da0078880bdfa7","permalink":"https://rafed.github.io/project/8-puzzle/","publishdate":"2017-08-05T00:00:00Z","relpermalink":"/project/8-puzzle/","section":"project","summary":"8 Puzzle Solver using A* search","tags":["Java","AI","academic"],"title":"8-puzzle Solver","type":"project"},{"authors":null,"categories":null,"content":"Syncer is a file syncing software for Desktop platforms. It is a dropbox clone made for our Software Project Lab-2 (SPL-2) course requirement. My wonderful teammate Moumita Asad was also involved in this project.\nTechnology used:\n Java  ","date":1495843200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1495843200,"objectID":"560db147495d8e31966b8973d3e43f40","permalink":"https://rafed.github.io/project/syncer/","publishdate":"2017-05-27T00:00:00Z","relpermalink":"/project/syncer/","section":"project","summary":"A dropbox clone made with Java","tags":["Java","academic"],"title":"Syncer - A File Syncing Software for Desktop","type":"project"},{"authors":null,"categories":null,"content":"Hostman is a CLI tool that can parse PCAP files and show the details of packets traversing through a network. The project is completely written in C. No libraries were used.\nIt is my first software project ever. It was done as a requirement for the sotware project lab-1 (SPL-1) course.\n   ","date":1467244800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1467244800,"objectID":"d0e00323a8024aa7349e76985feef7f6","permalink":"https://rafed.github.io/project/hostman/","publishdate":"2016-06-30T00:00:00Z","relpermalink":"/project/hostman/","section":"project","summary":"CLI tool for PCAP analysis","tags":["academic","networking"],"title":"Hostman - A PCAP analyzer","type":"project"},{"authors":null,"categories":null,"content":"A server/client app for chatting over the internet.\n","date":1441411200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1441411200,"objectID":"e2b38645b94a220a585fa242601c60ff","permalink":"https://rafed.github.io/project/chitchat/","publishdate":"2015-09-05T00:00:00Z","relpermalink":"/project/chitchat/","section":"project","summary":"A server/client app for chatting over the internet","tags":["Java","networking","academic"],"title":"ChitChat","type":"project"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"129769dccc079d4c24e381f0168fc092","permalink":"https://rafed.github.io/achievements/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/achievements/","section":"","summary":"","tags":null,"title":"Achievements","type":"widget_page"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"e1c21eee4493eef0adc68b83fc5e59e0","permalink":"https://rafed.github.io/experience/industry/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/experience/industry/","section":"","summary":"","tags":null,"title":"Industry Experience","type":"widget_page"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"b5604613992e17c8bebe7bb74c427320","permalink":"https://rafed.github.io/hobbies/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/hobbies/","section":"","summary":"","tags":null,"title":"Other Activities","type":"widget_page"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"6087c0ef875554f4409ac52928d79279","permalink":"https://rafed.github.io/projects/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/projects/","section":"","summary":"","tags":null,"title":"Projects","type":"widget_page"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"4985687fab2d756e0a4c5e015483d61c","permalink":"https://rafed.github.io/skills/development/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/skills/development/","section":"","summary":"","tags":null,"title":"Skills","type":"widget_page"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"ede6fe08b294c3d9a34eea93f94ffda8","permalink":"https://rafed.github.io/skills/devops/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/skills/devops/","section":"","summary":"","tags":null,"title":"Skills","type":"widget_page"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"a4f49097fae1c013c8779ca0433e225f","permalink":"https://rafed.github.io/skills/ml/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/skills/ml/","section":"","summary":"","tags":null,"title":"Skills","type":"widget_page"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"adf74ed3900d2a654a3154ef778f8d9d","permalink":"https://rafed.github.io/skills/security/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/skills/security/","section":"","summary":"","tags":null,"title":"Skills","type":"widget_page"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"283e1cffae055085e1f04bcdad23300d","permalink":"https://rafed.github.io/experience/teaching/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/experience/teaching/","section":"","summary":"","tags":null,"title":"Teaching Experience","type":"widget_page"}]