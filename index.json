[{"authors":null,"categories":null,"content":"Rafed is a software engineer at Brainstation-23. His interests include devops, software engineering, software security, and machine learning. He is currently bored so consult him on software development or research work. If you’re bored, then consider reading his tech blog where he writes about his perspectives, techniques and skills in software engineering.\n","date":1616544e3,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1616544e3,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://rafed.github.io/author/rafed-muhammad-yasir/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/rafed-muhammad-yasir/","section":"authors","summary":"Rafed is a software engineer at Brainstation-23. His interests include devops, software engineering, software security, and machine learning. He is currently bored so consult him on software development or research work.","tags":null,"title":"Rafed Muhammad Yasir","type":"authors"},{"authors":null,"categories":null,"content":"Sections  Introduction to Distributed systems A distributed system is a computing environment in which various components are spread across multiple computers (or other computing devices) on a network. If one machine can do a task in 1 hr, surely two equivalent machines can do it in 30 mins.\n  Introduction to Microservices    ","date":1612656e3,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1612656e3,"objectID":"45431c1790bff455ba35fe164bb0ff70","permalink":"https://rafed.github.io/courses/distributed-systems/theory/","publishdate":"2021-02-07T00:00:00Z","relpermalink":"/courses/distributed-systems/theory/","section":"courses","summary":"Blah, blah, blah...","tags":null,"title":"Theory","type":"book"},{"authors":null,"categories":null,"content":"This course is still under construction. Meanwhile, check out what have been arranged so far.\nWhat you will learn You will an get understanding of practical distributed systems.\nPython programming skills - Statistical concepts and how to apply them in practice - Gain experience with the Scikit, including data visualization with Plotly and data wrangling with Pandas -- Program overview Stil under construction.\n Theory Blah, blah, blah…\n  Lab Blah, blah, blah…\n  -- Meet your instructor Rafed Muhammad Yasir Are there prerequisites? There are no prerequisites for the first course.\n How often do the courses run? Continuously, at your own pace.\n --  Begin the course   ","date":1612483200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1612483200,"objectID":"7bd0ddd86a3cf0bc9cadf255c7179daa","permalink":"https://rafed.github.io/courses/distributed-systems/","publishdate":"2021-02-05T00:00:00Z","relpermalink":"/courses/distributed-systems/","section":"courses","summary":"This course is still under construction.","tags":null,"title":"Distributed Systems","type":"book"},{"authors":null,"categories":null,"content":"Sections  Containerizing an App Goal You will build a simple web application and containerize it with docker. Follow the instructions in this Github repo to complete this task.\n  Hands on DevOps Goal You will learn to build a CI/CD pipeline using git, Github actions and Heroku. Instructions Follow the instructions in this Github repo to complete this task.\n  Ride sharing backend: From monolith to microservices Goal Your task is to build a distributed web system following the microservice architecture. It should be implemented following the steps below. Step 1: Build a simple server (and a client) You will build a rudimentary version of a Ride sharing app (like Uber/Pathao).\n  Facebook backend: From monolith to microservices Goal Your task is to build a monolithic web based system. Then, break down the system into microservices following the microservice architecture. To acheive this follow the steps below. Step 1: Build a server and a client You will build a rudimentary version of Facebook.\n  ","date":1612656e3,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1612656e3,"objectID":"4f113652eec8ed327139eab22fd2412b","permalink":"https://rafed.github.io/courses/distributed-systems/lab/","publishdate":"2021-02-07T00:00:00Z","relpermalink":"/courses/distributed-systems/lab/","section":"courses","summary":"Blah, blah, blah...","tags":null,"title":"Lab","type":"book"},{"authors":null,"categories":null,"content":"A distributed system is a computing environment in which various components are spread across multiple computers (or other computing devices) on a network.\nIf one machine can do a task in 1 hr, surely two equivalent machines can do it in 30 mins.\nWe gain some sort of advantage that\nExamples of distributed systems\n Machine learning (for compute) P2P file sharing (high availability, share large files, piracy) Google search engine (for storage and bandwidth) Facebook (for storage and bandwidth) Multiplayer games (entertainment) Space rockets (correctness) spaceX dragon Black hole image (distributed observation) IOT (Sensors on a network) Blockchain decentralized record of transactions guarantees the fidelity and security of a record distributed database  ","date":1655424e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655424e3,"objectID":"6373c79cc711dcd915a5d810bf7e84b4","permalink":"https://rafed.github.io/courses/distributed-systems/theory/01-introduction/","publishdate":"2022-06-17T00:00:00Z","relpermalink":"/courses/distributed-systems/theory/01-introduction/","section":"courses","summary":"A distributed system is a computing environment in which various components are spread across multiple computers (or other computing devices) on a network.\nIf one machine can do a task in 1 hr, surely two equivalent machines can do it in 30 mins.","tags":null,"title":"Introduction to Distributed systems","type":"book"},{"authors":null,"categories":null,"content":"Goal You will build a simple web application and containerize it with docker.\nFollow the instructions in this Github repo to complete this task.\n","date":1612656e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1612656e3,"objectID":"7aa95b6e1fcde0bd2ec28ec6e27eeeaf","permalink":"https://rafed.github.io/courses/distributed-systems/lab/containerization/","publishdate":"2021-02-07T00:00:00Z","relpermalink":"/courses/distributed-systems/lab/containerization/","section":"courses","summary":"Goal You will build a simple web application and containerize it with docker.\nFollow the instructions in this Github repo to complete this task.","tags":null,"title":"Containerizing an App","type":"book"},{"authors":null,"categories":null,"content":"  ","date":1612656e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1612656e3,"objectID":"d2672b07e28eccaa9a51a8811c3f31e2","permalink":"https://rafed.github.io/courses/distributed-systems/theory/010-intro-microservices/","publishdate":"2021-02-07T00:00:00Z","relpermalink":"/courses/distributed-systems/theory/010-intro-microservices/","section":"courses","summary":"  ","tags":null,"title":"Introduction to Microservices","type":"book"},{"authors":null,"categories":null,"content":"Goal You will learn to build a CI/CD pipeline using git, Github actions and Heroku.\nInstructions Follow the instructions in this Github repo to complete this task.\n","date":1612656e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1612656e3,"objectID":"3d41a67f5e27567cc1ac8badcdf38863","permalink":"https://rafed.github.io/courses/distributed-systems/lab/devops/","publishdate":"2021-02-07T00:00:00Z","relpermalink":"/courses/distributed-systems/lab/devops/","section":"courses","summary":"Goal You will learn to build a CI/CD pipeline using git, Github actions and Heroku.\nInstructions Follow the instructions in this Github repo to complete this task.","tags":null,"title":"Hands on DevOps","type":"book"},{"authors":null,"categories":null,"content":"Goal Your task is to build a distributed web system following the microservice architecture. It should be implemented following the steps below.\nStep 1: Build a simple server (and a client) You will build a rudimentary version of a Ride sharing app (like Uber/Pathao). The app itself will not be complex as we are here to build a distributed system and not a full-fledged app.\nArchitecture graph TD A[\u0026#34;Client (Bot)\u0026#34;]--\u0026gt;B B[Server]--\u0026gt;C[(Database)]  Requirements Client bot The client bot will spam the server every second with the following two http requests:\n Rider’s request contains:  Name Rider’s Coordinates (x, y) [Random] Rider’s Destination (x, y) [Random]   Driver’s request contains:  Name Car number Driver’s Coordinates [Random]    Server requirements  /rider endpoint accepts rider requests (http) /driver endpoint accepts driver requests (http) The server will store the information in memory for at least 5 seconds. Design a function that will periodically run on the cached information and make pairs (rider, driver) based on their shortest linear distance. Open a socket.io bidirectional communication medium and send messages through the /communication namespace. Messages from the server will be sent to the client through this channel. Send the ride fare to the client (linear distance * 2 taka) (through socket.io) /rating endpoint receives a random rating after the bot receives a fare  Database  The database only stores driver ratings Storing other information is not necessary (yet) Use mysql or mongodb as your database  Other instructions  You may use any programming language. However, Node.js or Python or Go is recommended Frameworks/libraries can be used. However, it’s best not to use full-fledged frameworks. Simpler frameworks (like express/flask/gin) will make things easier Don’t implement extra features. Because later, distributing them in multiple instances could turn out to be a problem  Step 2: Service into microservices If you have completed step 1, congratulations! By now you have learned how to-\n make APIs and call them make sockets for bidirectional communication make schedulers that call a function periodically integrate database with an application  If you have done all that, kudos to you! You are now ready to start building microservices (or more like breaking an app into microservices).\nRequirements Let’s recap what modules we have in our backend system so far:\n a rider module a driver module a rider/driver matching module a rating module connecting to a database a communication module for bidirectional communication  We’ll convert these modules to make three business services.\n Ride sharing service  rider module driver module rider/driver matching module   Communication service Rating service  Our system architecture will be like the following.\nArchitecture graph TD A --- C[\u0026#34;Communication service (socket.io)\u0026#34;] A[\u0026#34;Client (Bot)\u0026#34;]--\u0026gt;B[\u0026#34;Reverse Proxy (Nginx)\u0026#34;] B--\u0026gt;R[Ride sharing service] B--\u0026gt;Ra[Rating service] Ra--\u0026gt;D[(Database)] R--\u0026gt;C  What to do?  In your project folder, make sub projects. Each sub project will be a separate service. Download and configure nginx so that it works as a reverse proxy for all http services (in our case ride sharing service and rating service). For nginx configuration Google is your friend. You can also follow their official docs at docs.nginx.com. Write additional code so that the services communicate among themselves and the business logic discussed in step 1 is served.  Step 3: Containerize and orchestrate If you have completed step 2, congratulations! You have successfully created a distributed system and have a gotten a flavor of how microservices work!\nIn this step we will do three things in our app-\n containerize the services that we made use pre built containers for mysql/mongo and nginx orchestrate our services  Self Learning First, you will need to do learn about containerization and orchestration with docker. You can watch the following tutorials-\n Docker in 100 seconds Docker in 7 easy steps Docker-compose tutorial And please, Google some stuff yourself  Once you understand the fundamentals, you can refer to this manual to run the most commonly used docker commands.\nAdditionally check out this repo for a demo web app that’s load balanced, containerized and orchestrated with docker.\nWhat to do?  Write a Dockerfile for each of the following service in their respective sub-project folder  ride sharing service rating servie communication service   Write a docker-compose.yml file in the root project folder to orchestrate all of the services  Other instructions  No change in the application code is necessary (Except maybe port numbers. You may want to reassign them). Windows cannot handle docker containers properly (even though Docker claims that they have support for windows). Use a Linux environment to run docker containers.  Step 4: Geo distribute the app Our ride sharing app is becoming popular! We now want to go global!\nArchitecture graph TD CD[\u0026#34;Client …","date":1612656e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1612656e3,"objectID":"8d62ecc6f7fb5395b4d54f22f63e873b","permalink":"https://rafed.github.io/courses/distributed-systems/lab/microservice-ride-share/","publishdate":"2021-02-07T00:00:00Z","relpermalink":"/courses/distributed-systems/lab/microservice-ride-share/","section":"courses","summary":"Goal Your task is to build a distributed web system following the microservice architecture. It should be implemented following the steps below.\nStep 1: Build a simple server (and a client) You will build a rudimentary version of a Ride sharing app (like Uber/Pathao).","tags":null,"title":"Ride sharing backend: From monolith to microservices","type":"book"},{"authors":null,"categories":null,"content":"Goal Your task is to build a monolithic web based system. Then, break down the system into microservices following the microservice architecture. To acheive this follow the steps below.\nStep 1: Build a server and a client You will build a rudimentary version of Facebook. The app itself should not be complex as we are here to build a distributed system and not a full featured social media app.\nArchitecture graph TD CLIENT[Client]--\u0026gt;SERVER[Server] SERVER--\u0026gt;DB[(Database)] SERVER--\u0026gt;OBJ_DB[(Object DB)]  Requirements Client Requirements The client UI will have three routes:\n Registration page Login page News feed page. A news feed will have  A horizontal list of stories at the top (images only) Status from different users (texts only, no comments)    Server requirements APIS  /register endpoint for creating new users  user registers with email and password   /login endpoint for logging (with JWT)  user logs in with email and password   /status endpoint for creating and retrieving status  GET: Get latest 10 statuses of all users except logged in user POST: Create new status for user   /story endpoint for creating and retrieving stories  GET: Get latest 10 statuses of all users except logged in user POST: Create new story for user    System assumptions  All users are friends by default The system needs no other services (e.g. messenger, poke, react)  Other instructions  Images uploaded in stories should be stored in an object store database (MinIO) Frameworks/libraries can be used. However, using frameworks (like express/flask/fastapi/gin) will make the assignment easier. Using a framework on the frontend can be useful (angular/vue/react). Don’t implement extra features. Because, distributing them in multiple instances could turn out to be a problem later. You may use any programming language. However, Node.js or Python or Go is recommended.  Step 2: Service into microservices (Coming Soon!) Architecture %% graph TD %% CLIENT[\u0026#34;Client\u0026#34;]--\u0026gt;PROXY[\u0026#34;Reverse Proxy (Nginx)\u0026#34;] %% PROXY--\u0026gt;AUTH[Reg \u0026amp; Auth] %% PROXY--\u0026gt;STATUS[Status] %% PROXY--\u0026gt;STORY[Story] %% AUTH--\u0026gt;USER_DB[(User DB)] %% STATUS--\u0026gt;STATUS_DB[(Status DB)] %% STATUS--\u0026gt;HS_MQ %% HS_MQ--\u0026gt;HS[Hate speech \u0026lt;br\u0026gt; checker] %% HS--\u0026gt;STATUS_DB %% STORY--\u0026gt;STORY_DB[(Story DB)] %% STORY--\u0026gt;OBJECT_DB[(Object DB)]  ","date":1656115200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1656115200,"objectID":"6c0cbe0c077177e5781e4b3319d238b7","permalink":"https://rafed.github.io/courses/distributed-systems/lab/microservice-facebook/","publishdate":"2022-06-25T00:00:00Z","relpermalink":"/courses/distributed-systems/lab/microservice-facebook/","section":"courses","summary":"Goal Your task is to build a monolithic web based system. Then, break down the system into microservices following the microservice architecture. To acheive this follow the steps below.\nStep 1: Build a server and a client You will build a rudimentary version of Facebook.","tags":null,"title":"Facebook backend: From monolith to microservices","type":"book"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Wowchemy’s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"96344c08df50a1b693cc40432115cbe3","permalink":"https://rafed.github.io/talk/example/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example/","section":"talk","summary":"An example talk using Wowchemy's Markdown slides feature.","tags":[],"title":"Nmap","type":"talk"},{"authors":null,"categories":null,"content":"I am very proud of this certificate as it is my first ever certification. Although I’m more experienced in AWS, I still decided to try my shot at azure. With a few days of learning I’m happy that I could achieve it. I hope this certification paves the way for me to learn and do more in the cloud realm.\n","date":1646784e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1646784e3,"objectID":"31c9af45d062f7bad0a5f1d7b4dc1e72","permalink":"https://rafed.github.io/achievement/certifications/azure-fundamentals/","publishdate":"2022-03-09T00:00:00Z","relpermalink":"/achievement/certifications/azure-fundamentals/","section":"achievement","summary":"Azure Fundamentals: My first ever cloud certification","tags":["Certifications"],"title":"Microsoft Certified: Azure Fundamentals","type":"achievement"},{"authors":["Moumita Asad","Rafed Muhammad Yasir","Shihab Shahriar","Nadia Nahar","Md. Nurul Ahad Tawhid"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.   --  Create your slides in Markdown - click the Slides button to check out the example.   -- ","date":1616544e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1616544e3,"objectID":"06495eda17c7b2c87609d8cd17110d4d","permalink":"https://rafed.github.io/publication/06-comprego/","publishdate":"2021-03-24T00:00:00Z","relpermalink":"/publication/06-comprego/","section":"publication","summary":"Program comprehension is one of the most important activities in developing and maintaining software. Although existing studies have examined aspects of Go such as design patterns, code smells and comment density, the comprehensibility of Go has not been explored yet. This study analyzes the comprehensibility of Go by comparing it with Java based on five metrics namely Too Long Files, Too Long Methods, Nesting Depth, Lack of Cohesive Comments and Duplicate Comments. For comparison, 50 popular, diverse and open-source projects are selected from each language. Results show that Go projects outperform Java in terms of Nesting Depth, Lack of Cohesive Comments and Duplicate Comments.","tags":null,"title":"Analyzing Program Comprehensibility of Go Projects","type":"publication"},{"authors":null,"categories":null,"content":"TEQ is a bus management admin panel developed and maintained by Brainstation-23 by for the Norwegian company Ferdia. The goal of this project is to eventually bring all bus companies in Norway under a single management system. Currently it has over 20 bus companies using it.\nMy responsibilities include:\n Work as a backend engineer (Python, Django) DevOps Engineer  ","date":1614556800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1614556800,"objectID":"ec2a6326a64a0a59c1c270659c65efff","permalink":"https://rafed.github.io/project/teq/","publishdate":"2021-03-01T00:00:00Z","relpermalink":"/project/teq/","section":"project","summary":"A Norwegian Bus/Transport Management App","tags":["real"],"title":"TEQ","type":"project"},{"authors":null,"categories":null,"content":"BlogRa is a tech blogging theme for Hugo. I did not find the existing themes for Hugo suitable for my blogging experience. So I made this for myself.\nCheck it out. A star on the repo would be much appreciated.\n","date":1613088e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1613088e3,"objectID":"04104922d766daaf4cef9d8cd8a1c4f7","permalink":"https://rafed.github.io/project/blogra/","publishdate":"2021-02-12T00:00:00Z","relpermalink":"/project/blogra/","section":"project","summary":"A tech blogging theme for Hugo","tags":["hugo","pet"],"title":"BlogRa","type":"project"},{"authors":["Dr. Ishtiaque Hussain","Ahmed Shamim Hasan","Rafed Muhammad Yasir","Dr. Ahmedul Kabir","Syed Ishtiaque Ahmed"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including [code, math, and images](https://wowchemy.com/docs/writing-markdown-latex/). -- ","date":1604793600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1604793600,"objectID":"3dd09a9bc607a4cd0e422f59dd1fd4b2","permalink":"https://rafed.github.io/publication/04-how-well-does-undergraduate-education/","publishdate":"2020-01-08T00:00:00Z","relpermalink":"/publication/04-how-well-does-undergraduate-education/","section":"publication","summary":"While the sole purpose of undergraduate education is not to prepare the students for the industry, it is certainly one of its important objectives. In this work, we investigate how well the Bangladeshi software and IT-related undergraduate education prepares the students for the software industry. We conducted semi-structured interviews of twenty practitioners from the Bangladeshi software industry. During the interviews, these practitioners provided commentary on where they believe the undergraduate education system falls short, and provided their suggestions for improvement. Based on the themes discovered from the interviews, we created a survey where more than two hundred practitioners participated. The results of our work suggest that most of the practitioners believe that, while some aspects of the undergraduate education are fine, the undergraduate education system leaves its graduates largely unprepared for the software industry. In this paper, we summarize and present the practitioners' opinions on some key areas including but not limited to updating of syllabi, internships as part of the curricula, the nature, length and evaluation process of undergraduate projects, pedagogical issues, and academic practices.","tags":null,"title":"How Well Does Undergraduate Education Prepare Software Engineers? Perspectives of Practitioners in Bangladesh","type":"publication"},{"authors":null,"categories":null,"content":"After discovering Hugo (a static blog generator), I decided to make a theme for myself and Ramium was the result.\nNot really the best theme out there, but hey, it was a nice learning experience.\nI have made a better theme now called BlogRa, which I use for my personal tech blog. Check it out at github.com/rafed/BlogRa\n","date":1588464e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588464e3,"objectID":"91b98d8c1d6f5c8b0f60d6d26dd96f40","permalink":"https://rafed.github.io/project/ramium/","publishdate":"2020-05-03T00:00:00Z","relpermalink":"/project/ramium/","section":"project","summary":"My first blogging theme for Hugo","tags":["hugo","pet"],"title":"Ramium","type":"project"},{"authors":["Rafed Muhammad Yasir","Dr. Ahmedul Kabir"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.   --  Create your slides in Markdown - click the Slides button to check out the example.   -- ","date":1578182400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1578182400,"objectID":"c9de7cff894b36a3cfee5ecb650d8b5b","permalink":"https://rafed.github.io/publication/03-code-style/","publishdate":"2020-01-05T00:00:00Z","relpermalink":"/publication/03-code-style/","section":"publication","summary":"Code style reflects the choice of textual representation of source code. This study, for the first time, explores whether code style can be used to identify good programmers with a vision that recruitment process in the software industry can be improved. For analysis, solutions from Google Code Jam were selected. The study used cluster analysis to find association between good programmers and style clusters. Furthermore, supervised machine learning models were trained with stylistic features to predict good programmers. Results reveal that, although association between programmers with particular clusters could not be concluded, supervised learning models can predict good programmers.","tags":null,"title":"Exploring the Impact of Code Style in Identifying Good Programmers","type":"publication"},{"authors":["Rafed Muhammad Yasir","Moumita Asad","Dr. Ahmedul Kabir"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.   --  Create your slides in Markdown - click the Slides button to check out the example.   -- ","date":1573776e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1573776e3,"objectID":"9ff9ecffc1675603912c9ade5814a210","permalink":"https://rafed.github.io/publication/05-defect-prediction/","publishdate":"2019-11-15T00:00:00Z","relpermalink":"/publication/05-defect-prediction/","section":"publication","summary":"Defect prediction is one of the most popular research topics due to its potentiality to minimize software quality assurance effort. Existing approaches have examined defect prediction from various perspective such as complexity and developer metrics. However, none of these consider programming style for defect prediction. This paper aims at analyzing the impact of stylistic metrics on both within-project and cross-project defect prediction. For prediction, 4 widely used machine learning algorithms namely Naive Bayes, Support Vector Machine, Decision Tree and Logistic Regression are used. The experiment is conducted on 14 releases of 5 popular, open source projects. F1, Precision and Recall are inspected to evaluate the results. Results reveal that stylistic metrics are good predictor of defects.","tags":null,"title":"Defect Prediction Using Stylistic Metrics","type":"publication"},{"authors":["Rafed Muhammad Yasir","Moumita Asad","Asadullah Hill Galib","Kishan Kumar Ganguly","Md Saeed Siddik"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.   --  Create your slides in Markdown - click the Slides button to check out the example.   -- ","date":1559001600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559001600,"objectID":"72aa02ec92744bfe6fb02d2ec07b2cd0","permalink":"https://rafed.github.io/publication/02-godexpo/","publishdate":"2019-05-28T00:00:00Z","relpermalink":"/publication/02-godexpo/","section":"publication","summary":"God Class is a class that threatens maintainability and understandability of code by performing most of the work alone. Various tools exist that can detect God Class of Java or C++ programs, however, there is no existing tool for detecting God Class(Structure) in Golang. Although Golang is not an object-oriented language, it offers structures which are similar to classes in OOP as they can contain fields and methods. Unlike OOP, methods of a structure can be defined on any file in the package of Golang. This paper presents a tool entitled GodExpo to detect God Structures in Golang programs by calculating metrics namely Weighted Method Count, Tight Class Cohesion, and Access to Foreign Data. In addition, GodExpo can provide version wise results to observe the evolution of God structures. To evaluate GodExpo, an experiment has been conducted on several versions of two open source Golang projects and the tool successfully found God structures in all versions of those projects.","tags":null,"title":"GodExpo: an automated god structure detection tool for Golang","type":"publication"},{"authors":["Moumita Asad","Rafed Muhammad Yasir","Dr. Nowshin Nower","Dr. Mohammad Shoyaib"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.   --  Create your slides in Markdown - click the Slides button to check out the example.   -- ","date":1556668800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1556668800,"objectID":"f25761a3965e671e52541d2af7e28560","permalink":"https://rafed.github.io/publication/01-traffic-congestion/","publishdate":"2019-05-01T00:00:00Z","relpermalink":"/publication/01-traffic-congestion/","section":"publication","summary":"The prediction of traffic congestion can serve a crucial role in making future decisions. Although many studies have been conducted regarding congestion, most of these could not cover all the important factors (e.g., weather conditions). We proposed a prediction model for the traffic congestion that can predict congestion based on day, time and several weather data (e.g., temperature, humidity). To evaluate our model, it has been tested against the traffic data of New Delhi. With this model, congestion of a road can be predicted one week ahead with an average RMSE of 1.12. Therefore, this model can be used to take preventive measure beforehand.","tags":null,"title":"Traffic Congestion Prediction Using Machine Learning Techniques","type":"publication"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;)   Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  **Two**  Three   A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/media/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}}   Custom CSS Example Let’s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }   Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://rafed.github.io/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":null,"categories":null,"content":"Virtual Trial Room is one of my most successful projects. It is a browser based dressing room where you can digitally try out different clothes.\n   This project several awards-\n Champions, NSU Technovation Hackathon 2018, North South University Joint Runners Up, NSU Cybernauts, North South University Computer \u0026amp; Engineering Club (NSU CEC) Second Runners Up, Technival 2018, Khulna University of Engineering and Technology (KUET) Second Runners Up, Inter University Project Show, CSE Fest, Bangladesh University of Engineering and Technology (BUET)     This project also got featured on BBC Click.\n   My talented friends who contributed to this project are:\n Moumita Asad Aquib Azmain  Technology used:\n Python Flask OpenCV  ","date":1543968e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1543968e3,"objectID":"3d44c1c7b9357450d1131e63eb453d6b","permalink":"https://rafed.github.io/project/virtual-trial-room/","publishdate":"2018-12-05T00:00:00Z","relpermalink":"/project/virtual-trial-room/","section":"project","summary":"A browser based trial room for wearing clothes virtually","tags":["Python","ML","competition"],"title":"Virtual Trial Room","type":"project"},{"authors":null,"categories":null,"content":"Salimullah Hall Management System is a web application to digitize the activities of Salimullah Hall, University of Dhaka. Our entire university batch contributed in developing this app in our final semester. Through the app the following activities can be done:\n Student management Employee management Inventory management Accounting Residence management User management  Technology used:\n Python Flask Angular MariaDB  ","date":1543276800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1543276800,"objectID":"9c1612d20fad9bec87702511fa5818b3","permalink":"https://rafed.github.io/project/sm-hall-management/","publishdate":"2018-11-27T00:00:00Z","relpermalink":"/project/sm-hall-management/","section":"project","summary":"Web based app for managing students, inventories, employees and others.","tags":["Python","academic","real"],"title":"Salimullah Hall Management System","type":"project"},{"authors":null,"categories":null,"content":"ScanF is a web application vulnerability assessment tool. It is aimed at assisting penetration testers to easily carry out XSS and SQLi attacks to search for vulnerabilities.\nTechnology used:\n Python Flask Selenium Vue  ","date":1543276800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1543276800,"objectID":"12c7bfa22d8e59fb1c5a85c94c0c4908","permalink":"https://rafed.github.io/project/scanf/","publishdate":"2018-11-27T00:00:00Z","relpermalink":"/project/scanf/","section":"project","summary":"Web based tool for SQLi and XSS","tags":["academic"],"title":"ScanF - A web application security assessment tool","type":"project"},{"authors":null,"categories":null,"content":"Showme is a tool that shows research related work of a paper by showing its citation graph. It was made for the SCORE competition in ICSE 2018 and it made to the final six. Other awesome members who also contributed to the project:\n Kishan Kumar Ganguly Moumita Asad Aquib Azmain  Technology used:\n Python Flask Angular  ","date":1536969600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1536969600,"objectID":"f0c81714540ca4b4edfb937c62dd333f","permalink":"https://rafed.github.io/project/showme/","publishdate":"2018-09-15T00:00:00Z","relpermalink":"/project/showme/","section":"project","summary":"Citation graph tool for research papers","tags":["ICSE","competition"],"title":"Showme - ICSE SCORE","type":"project"},{"authors":null,"categories":null,"content":"BUET CSE fest was yet another win for our virtual trial room project. Being able to take away a prize from the strong contenders of BUET is really an achievement to remember.\nProject: Virtual Trial Room\nTeam members:\n Rafed Muhammad Yasir Aquib Azmain Moumita Asad     ","date":1525910400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1525910400,"objectID":"e77b19a6cbfa2fc9ccc93574e7162733","permalink":"https://rafed.github.io/achievement/awards/04-buet-cse-fest/","publishdate":"2018-05-10T00:00:00Z","relpermalink":"/achievement/awards/04-buet-cse-fest/","section":"achievement","summary":"CSE fest, Bangladesh University of Engineering \u0026 Technology (BUET)","tags":["Awards"],"title":"Second runners up, Inter university project show","type":"achievement"},{"authors":null,"categories":null,"content":"KUET technival was the biggest compeition we faced so far in terms of number of participants. It was a hard competition and we managed a 2nd runners up.\nProject: Virtual Trial Room\nTeam members:\n Rafed Muhammad Yasir Moumita Asad Aquib Azmain     ","date":1524268800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1524268800,"objectID":"917cda54d892a4f710b06e18b5e89c20","permalink":"https://rafed.github.io/achievement/awards/03-kuet-technival/","publishdate":"2018-04-21T00:00:00Z","relpermalink":"/achievement/awards/03-kuet-technival/","section":"achievement","summary":"Technival 2018, Khulna University of Engineering \u0026 Technology (KUET)","tags":["Awards"],"title":"Second Runners Up, Project Showcasing","type":"achievement"},{"authors":null,"categories":null,"content":"Another achievement from NSU! A bit unlucky we even had to share the position of runners up. Apart from that it was an event to enjoy!\nAlso got lucky to give my first tv interview ever and that too on BBC click!\nProject: Virtual Trial Room\nTeam members:\n Rafed Muhammad Yasir Moumita Asad Aquib Azmain     ","date":1521676800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1521676800,"objectID":"2450e2fe9a1b6234304e14c6105e75b5","permalink":"https://rafed.github.io/achievement/awards/02-nsu-cybernauts/","publishdate":"2018-03-22T00:00:00Z","relpermalink":"/achievement/awards/02-nsu-cybernauts/","section":"achievement","summary":"NSU Cybernauts, North South University Computer and Engineering Club (NSU CEC)","tags":["Awards"],"title":"Joint Runners Up, Senior Project Showcasing","type":"achievement"},{"authors":null,"categories":null,"content":"Our first ever hackathon and our first ever victory being champions. It was a moment to remember at NSU.\nProject: Virtual Trial Room\nTeam members:\n Rafed Muhammad Yasir Moumita Asad Shuvo Saha Fazle Rabbi     ","date":1519430400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1519430400,"objectID":"af6790eefed2c7f51bbe74039f255f12","permalink":"https://rafed.github.io/achievement/awards/01-nsu-technovation/","publishdate":"2018-02-24T00:00:00Z","relpermalink":"/achievement/awards/01-nsu-technovation/","section":"achievement","summary":"NSU Technovation Hackathon 2018, North South University (NSU)","tags":["Awards"],"title":"Champions, Hackathon","type":"achievement"},{"authors":null,"categories":null,"content":"8-puzzle solver using A* search algorithm, implemented in Java. This was a class assignment.\n","date":1501891200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1501891200,"objectID":"583d488c802cb0ec73da0078880bdfa7","permalink":"https://rafed.github.io/project/8-puzzle/","publishdate":"2017-08-05T00:00:00Z","relpermalink":"/project/8-puzzle/","section":"project","summary":"8 Puzzle Solver using A* search","tags":["Java","AI","academic"],"title":"8-puzzle Solver","type":"project"},{"authors":null,"categories":null,"content":"Syncer is a file syncing software for Desktop platforms. It is a dropbox clone made for our Software Project Lab-2 (SPL-2) course requirement. My wonderful teammate Moumita Asad was also involved in this project.\nTechnology used:\n Java  ","date":1495843200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1495843200,"objectID":"560db147495d8e31966b8973d3e43f40","permalink":"https://rafed.github.io/project/syncer/","publishdate":"2017-05-27T00:00:00Z","relpermalink":"/project/syncer/","section":"project","summary":"A dropbox clone made with Java","tags":["Java","academic"],"title":"Syncer - A File Syncing Software for Desktop","type":"project"},{"authors":null,"categories":null,"content":"Hostman is a CLI tool that can parse PCAP files and show the details of packets traversing through a network. The project is completely written in C. No libraries were used.\nIt is my first software project ever. It was done as a requirement for the sotware project lab-1 (SPL-1) course.\n   ","date":1467244800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1467244800,"objectID":"d0e00323a8024aa7349e76985feef7f6","permalink":"https://rafed.github.io/project/hostman/","publishdate":"2016-06-30T00:00:00Z","relpermalink":"/project/hostman/","section":"project","summary":"CLI tool for PCAP analysis","tags":["academic","networking"],"title":"Hostman - A PCAP analyzer","type":"project"},{"authors":null,"categories":null,"content":"A server/client app for chatting over the internet.\n","date":1441411200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1441411200,"objectID":"e2b38645b94a220a585fa242601c60ff","permalink":"https://rafed.github.io/project/chitchat/","publishdate":"2015-09-05T00:00:00Z","relpermalink":"/project/chitchat/","section":"project","summary":"A server/client app for chatting over the internet","tags":["Java","networking","academic"],"title":"ChitChat","type":"project"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"129769dccc079d4c24e381f0168fc092","permalink":"https://rafed.github.io/achievements/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/achievements/","section":"","summary":"","tags":null,"title":"Achievements","type":"widget_page"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"c9b5771543b03b8149b612b630936a56","permalink":"https://rafed.github.io/experience/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/experience/","section":"","summary":"","tags":null,"title":"Experience","type":"widget_page"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"b7337c4298ac6389b96009aa61e2c18c","permalink":"https://rafed.github.io/other/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/other/","section":"","summary":"","tags":null,"title":"Other Activities","type":"widget_page"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"6087c0ef875554f4409ac52928d79279","permalink":"https://rafed.github.io/projects/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/projects/","section":"","summary":"","tags":null,"title":"Projects","type":"widget_page"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"4985687fab2d756e0a4c5e015483d61c","permalink":"https://rafed.github.io/skills/development/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/skills/development/","section":"","summary":"","tags":null,"title":"Skills","type":"widget_page"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"32e1fda3bbf5f90be88d38f08707c91d","permalink":"https://rafed.github.io/skills/cloud/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/skills/cloud/","section":"","summary":"","tags":null,"title":"Skills","type":"widget_page"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"87a3eea6a58f6df8450a85092afc68bf","permalink":"https://rafed.github.io/skills/devsecops/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/skills/devsecops/","section":"","summary":"","tags":null,"title":"Skills","type":"widget_page"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"a4f49097fae1c013c8779ca0433e225f","permalink":"https://rafed.github.io/skills/ml/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/skills/ml/","section":"","summary":"","tags":null,"title":"Skills","type":"widget_page"}]